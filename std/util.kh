def priority_encode_to_index(n: uint, x: bits(2**n)) -> Option(uint(n)) {
    for i in 0..2**n {
        if x[i] {
            return .Some(i);
        }
    }
    return .None;
}

def index_to_one_hot(n: uint, index: Option(bits(n))) -> bits(2**n) {
    let result = [0] * n;
    result[index] = 1;
    return result;
}
