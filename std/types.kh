// TODO allow signature declarations for everything, even types!

// Basic types
type bool;

// TODO do we need bits? or will arrays be convenient enough?
// TODO support both named and unnamed parameters for types
type bits;
// TODO is this just a type alias for an array of bools?
type bits(n: uint) = Array(bool, n);

// Signature overloading, even for types!
// TODO allow separate optional min and max? then uint is just int(0..)
type int;
type uint(Range(uint));
type int(Range(int));
type uint(n: int) = int(-2**(n - 1) .. 2**(n - 1));
type int(n: int) = int(0.. 2**(n - 1));

// Containers
type List(T: type);
type Array(T: type, uint); // TODO "uint, *uint" or "+uint"?

// Utility
// TODO convert between these for unbounded types, eg. int/uint
struct Range(T: type) { min: T, max: T }
struct RangeInc(T: type) { min: T, max_inc: T }

// TODO parse enum
//enum Option(T: type) {
//    None,
//    Some(T),
//}

// Operators
// TODO move operators to different file
// TODO operator bodies? implement in std or in compiler?
// TODO allow multiline calculations for output type?
// operator "+"(
//     left: integer(left_range),
//     right: integer(right_range),
// ) -> integer() {
//
// }
