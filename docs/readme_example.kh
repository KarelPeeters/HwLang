import std.types.[bool, int, uint, natural, any];

pub module top ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
        data_to_add: in uint(0..8),
        stream_in: interface axi_stream(uint(0..8)).input,
        stream_out: interface axi_stream(uint(0..16)).output,
        values_transferred: out uint(32),
    }
) {
    comb {
        stream_in.ready = stream_out.ready;
        stream_out.valid = stream_in.valid;
        stream_out.data = stream_in.data + data_to_add;
    }

    reg out values_transferred = 0;
    clocked(clk, async rst) {
        if (stream_out.valid && stream_out.ready) {
            values_transferred = (values_transferred + 1) % 2**32;
        }
    }
}

interface axi_stream(T: type) {
    ready: bool, valid: bool, data: T,
    interface input { ready: out, valid: in, data: in }
    interface output { ready: in, valid: out, data: out }
}
