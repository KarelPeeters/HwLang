// TODO allow signature declarations for everything, even types!

// Basic types
pub type any = __builtin("type", "any");

// TODO bool should be an enum :)
pub type bool = __builtin("type", "bool");

// TODO what is the difference if anything between "type" and "const" for types?
//const bool: type = __builtin("type", );

//pub type my_array(T: type) = Array(T, n);
//function my_array(T: type) -> type {
//    return Array(T, n);
//}

// Signature overloading, even for types!
// TODO allow separate optional min and max? then uint is just int(0..)
// TODO is there a nice way to make "unsigned" the default?

// Usages:
// x: int -> infinitely sized
// x: int(0..), x: int(2..17) -> partially constrained halfopen ranges
// x: int(0..=7), x: int(..=8) -> partially constrained closed ranges
// x: uint -> simple alias for a positive integer
// TODO do we want to allow uint to take ranges?

// Utility
//pub enum Option(T: type) {
//    None,
//    Some(T),
//}

// TODO go back to a more user-accessible struct
//pub type Range = __builtin("type", "Range");
//struct Range(L: type, H: type) {
//    min: L,
//    max: H,
//}

// TODO add overloading to make this nicer
pub type int_range(r: Range) = __builtin("type", "int_range", r);

pub type int = int_range(..);
pub type uint = int_range(0..);
pub type natural = int_range(1..);
pub type int_bits(n: natural) = int_range(-2**(n - 1) .. 2**(n - 1));
pub type uint_bits(n: uint) = int_range(0 .. 2**n);

// Containers
//pub type List(T: type) = __builtin("type", "List", T);

// TODO should this just be an alias for an potentially infinitely long array of booleans?
// TODO do we want an infinite-width bits type, mostly for bitwise operators?
//   (ideally we don't define bitwise operators on uint)
//   maybe we can allow infinite-width arrays?
//pub type bits_inf = __builtin("type", "bits_inf");
//pub type bits(n: uint) = bool[n];

// Operators
// TODO move operators to different file
// TODO operator bodies? implement in std or in compiler?
// TODO allow multiline calculations for output type?
// operator "+"(
//     left: integer(left_range),
//     right: integer(right_range),
// ) -> integer() {
//
// }
