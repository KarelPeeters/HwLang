import std.types.[any, bool, str, uint];

// TODO this should be a builtin that does not evaluate the target (for named values)
pub fn typeof(value: any) -> type {
    return __builtin("fn", "typeof", value);
}

pub fn print(value: any) {
    __builtin("fn", "print", value);
}

// TODO add default parameter values
pub fn assert(cond: bool, msg: str = "assertion failed") {
    __builtin("fn", "assert", cond, msg);
}

// TODO parse "clock" as return type here?
pub fn unsafe_cast_clock(value: bool) -> any {
    return __builtin("fn", "unsafe_cast_clock", value);
}

// TODO make this `b.to_int()` instead of `bool_to_int(b)`?
pub fn bool_to_int(b: bool) -> int_range(0..=1) {
    return int_range(0..=1).from_bits([b]);
}
