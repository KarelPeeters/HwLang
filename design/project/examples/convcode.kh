import std.types.[bool, int, uint, natural];
import std.math.[clog2];
import std.util.[typeof, print];

struct Generator(L: natural) {
    generator_0: [L]bool,
    generator_1: [L]bool,
}

pub module convcode_encoder(
    length: natural,
    generator: Generator(length),
) ports (
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
        input_data: in bool,
        input_valid: in bool,

        output_data_0: out bool,
        output_data_1: out bool,
        output_valid: out bool
    }
) body {
    reg delay_line: sync(clk, rst) [length - 1]bool = [false] * (length - 1);
    reg out output_data_0 = false;
    reg out output_data_1 = false;
    reg out output_valid = false;

    clocked(clk, async rst) {
        if (input_valid) {
            // update delay line
            val delay_line_extra = [*delay_line, input_data];
            delay_line = delay_line_extra[1..];

            // do convolution
            output_data_0 = false;
            output_data_1 = false;
            for (i in 0..length) {
                output_data_0 ^= delay_line_extra[i] & generator.generator_0[length - 1 - i];
                output_data_1 ^= delay_line_extra[i] & generator.generator_1[length - 1 - i];
            }
        }

        output_valid = input_valid;
    }
}

pub module convcode_decoder(
    length: natural,
    generator: Generator(length),
    analog_bits: natural,
    depth: natural,
) ports (
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
        input_data_0: in uint(analog_bits),
        input_data_1: in uint(analog_bits),
        input_valid: in bool,

        output_data: out bool,
        output_valid: out bool,
    }
) body {
    const num_states = 2**length;
    const prob_bits = clog2(length) + analog_bits + 2;
    const codebook: [num_states, 2]bool = [
        {
            val code = uint(length).to_bits(i);
            var output = [false, false];
            for (j in 0..length) {
                output[0] ^= code[j] & generator.generator_0[length - 1 - j];
                output[1] ^= code[j] & generator.generator_1[length - 1 - j];
            }
            output
        } for i in 0..num_states
    ];

    type t_half_probs = [num_states/2]uint(prob_bits);
    type t_probs = [num_states]uint(prob_bits);
    type t_half_paths = [num_states/2, depth]bool;
    type t_paths = [num_states, depth]bool;

    const half_paths_reset = [[false] * depth] * (num_states/2);

    reg half_probs: t_half_probs = [0] * (num_states/2);
    reg half_paths: t_half_paths = half_paths_reset;
    reg out output_data = false;
    reg out output_valid = false;

    clocked(clk, async rst) {
        if (input_valid) {
            // calculate output
            var out_probs_max: t_half_probs = half_probs;
            var outputs_max: [num_states/2]bool = [half_paths[i, 0] for i in 0..num_states/2];
            for (j_rev in 0..(length - 1)) {
                val j = length - 2 - j_rev;
                for (i in 0..2**j) {
                    // TODO this condition is probably wrong
                    val delta = out_probs_max[2*i + 0] - out_probs_max[2*i + 1];
                    if (delta < 2**prob_bits - 1) {
                        out_probs_max[i] = out_probs_max[2*i + 0];
                        outputs_max[i] = outputs_max[2*i + 0];
                    } else {
                        out_probs_max[i] = out_probs_max[2*i + 1];
                        outputs_max[i] = outputs_max[2*i + 1];
                    }
                }
            }
            output_data = outputs_max[0];

            // calculate new probabilities and paths
            val book_probs: [4]uint(prob_bits) = [
                uint_not(analog_bits, input_data_0) + uint_not(analog_bits, input_data_1),
                input_data_0 + uint_not(analog_bits, input_data_1),
                uint_not(analog_bits, input_data_0) + input_data_1,
                input_data_0 + input_data_1,
            ];
            var probs_new: t_probs = [*half_probs, *half_probs];
            var paths_new: t_paths = [*half_paths, *half_paths];
            for (i in 0..num_states) {
                // TODO the modulo here is awkward
                probs_new[i] = (probs_new[i] + book_probs[uint(2).from_bits(codebook[i])]) % 2**prob_bits;
            }

            // update probabilities and paths
            val half_probs_0: t_half_probs = [probs_new[2*i+0] for i in 0..num_states/2];
            val half_probs_1: t_half_probs = [probs_new[2*i+1] for i in 0..num_states/2];
            val half_paths_0: t_half_paths = [[*paths_new[2*i+0, 1..], false] for i in 0..num_states/2];
            val half_paths_1: t_half_paths = [[*paths_new[2*i+1, 1..], true] for i in 0..num_states/2];

            // select best probabilities and paths
            for (i in 0..num_states/2) {
                val delta = half_probs_0[i] - half_probs_1[i];
                // TODO this condition is probably wrong
                if (delta < 2**prob_bits - 1) {
                    half_probs[i] = half_probs_0[i];
                    half_paths[i] = half_paths_0[i];
                } else {
                    half_probs[i] = half_probs_1[i];
                    half_paths[i] = half_paths_1[i];
                }
            }
        }

        output_valid = input_valid;
    }
}

// TODO this is a weird construct, what does this even mean in context?
// TODO should we allow arithmetic on bool arrays?
fn uint_not(n: uint, v: uint(n)) -> uint(n) {
    type ty = uint(n);
    return ty.from_bits([!x for x in ty.to_bits(n)]);
}

const {
    const example_length = 3;
    const example_generator = Generator(example_length).new(
        generator_0=[true, true, true],
        generator_1=[true, false, true]
    );
    const example_analog_bits = 8;
    const example_depth = 4;

    convcode_encoder(
        length=example_length, generator=example_generator
    );
    convcode_decoder(
        length=example_length, generator=example_generator,
        analog_bits=example_analog_bits, depth=example_depth
    );
}
