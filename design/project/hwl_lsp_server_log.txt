server started
waiting for message
==> Notification(Notification { method: "textDocument/didOpen", params: Object {"textDocument": Object {"languageId": String("hwlang"), "text": String("import std.types.[bool, int, uint, natural];\nimport std.math.[clog2];\nimport std.util.[typeof, print];\n\nstruct Generator(L: natural) {\n    generator_0: [L]bool,\n    generator_1: [L]bool,\n}\n\npub module convcode_encoder(\n    length: natural,\n    generator: Generator(length),\n) ports (\n    clk: in clock,\n    rst: in async bool,\n\n    sync(clk, rst) {\n        input_data: in bool,\n        input_valid: in bool,\n\n        output_data_0: out bool,\n        output_data_1: out bool,\n        output_valid: out bool\n    }\n) {\n    reg delay_line: sync(clk, rst) [length - 1]bool = [false] * (length - 1);\n    reg out output_data_0 = false;\n    reg out output_data_1 = false;\n    reg out output_valid = false;\n\n    clocked(clk, async rst) {\n        if (input_valid) {\n            // update delay line\n            val delay_line_extra = [*delay_line, input_data];\n            delay_line = delay_line_extra[1..];\n\n            // do convolution\n            output_data_0 = false;\n            output_data_1 = false;\n            for (i in 0..length) {\n                output_data_0 ^= delay_line_extra[i] & generator.generator_0[length - 1 - i];\n                output_data_1 ^= delay_line_extra[i] & generator.generator_1[length - 1 - i];\n            }\n        }\n\n        output_valid = input_valid;\n    }\n}\n\npub module convcode_decoder(\n    length: natural,\n    generator: Generator(length),\n    analog_bits: natural,\n    depth: natural,\n) ports (\n    clk: in clock,\n    rst: in async bool,\n\n    sync(clk, rst) {\n        input_data_0: in uint(analog_bits),\n        input_data_1: in uint(analog_bits),\n        input_valid: in bool,\n\n        output_data: out bool,\n        output_valid: out bool,\n    }\n) {\n    const num_states = 2**length;\n    const prob_bits = clog2(length) + analog_bits + 2;\n    const codebook: [num_states, 2]bool = [\n        {\n            val code = uint(length).to_bits(i);\n            var output = [false, false];\n            for (j in 0..length) {\n                output[0] ^= code[j] & generator.generator_0[length - 1 - j];\n                output[1] ^= code[j] & generator.generator_1[length - 1 - j];\n            }\n            output\n        } for i in 0..num_states\n    ];\n\n    type t_half_probs = [num_states/2]uint(prob_bits);\n    type t_probs = [num_states]uint(prob_bits);\n    type t_half_paths = [num_states/2, depth]bool;\n    type t_paths = [num_states, depth]bool;\n\n    const half_paths_reset = [[false] * depth] * (num_states/2);\n\n    reg half_probs: t_half_probs = [0] * (num_states/2);\n    reg half_paths: t_half_paths = half_paths_reset;\n    reg out output_data = false;\n    reg out output_valid = false;\n\n    clocked(clk, async rst) {\n        if (input_valid) {\n            // calculate output\n            var out_probs_max: t_half_probs = half_probs;\n            var outputs_max: [num_states/2]bool = [half_paths[i, 0] for i in 0..num_states/2];\n            for (j_rev in 0..(length - 1)) {\n                val j = length - 2 - j_rev;\n                for (i in 0..2**j) {\n                    // TODO this condition is probably wrong\n                    val delta = out_probs_max[2*i + 0] - out_probs_max[2*i + 1];\n                    if (delta < 2**prob_bits - 1) {\n                        out_probs_max[i] = out_probs_max[2*i + 0];\n                        outputs_max[i] = outputs_max[2*i + 0];\n                    } else {\n                        out_probs_max[i] = out_probs_max[2*i + 1];\n                        outputs_max[i] = outputs_max[2*i + 1];\n                    }\n                }\n            }\n            output_data = outputs_max[0];\n\n            // calculate new probabilities and paths\n            val book_probs: [4]uint(prob_bits) = [\n                uint_not(analog_bits, input_data_0) + uint_not(analog_bits, input_data_1),\n                input_data_0 + uint_not(analog_bits, input_data_1),\n                uint_not(analog_bits, input_data_0) + input_data_1,\n                input_data_0 + input_data_1,\n            ];\n            var probs_new: t_probs = [*half_probs, *half_probs];\n            var paths_new: t_paths = [*half_paths, *half_paths];\n            for (i in 0..num_states) {\n                // TODO the modulo here is awkward\n                probs_new[i] = (probs_new[i] + book_probs[uint(2).from_bits(codebook[i])]) % 2**prob_bits;\n            }\n\n            // update probabilities and paths\n            val half_probs_0: t_half_probs = [probs_new[2*i+0] for i in 0..num_states/2];\n            val half_probs_1: t_half_probs = [probs_new[2*i+1] for i in 0..num_states/2];\n            val half_paths_0: t_half_paths = [[*paths_new[2*i+0, 1..], false] for i in 0..num_states/2];\n            val half_paths_1: t_half_paths = [[*paths_new[2*i+1, 1..], true] for i in 0..num_states/2];\n\n            // select best probabilities and paths\n            for (i in 0..num_states/2) {\n                val delta = half_probs_0[i] - half_probs_1[i];\n                // TODO this condition is probably wrong\n                if (delta < 2**prob_bits - 1) {\n                    half_probs[i] = half_probs_0[i];\n                    half_paths[i] = half_paths_0[i];\n                } else {\n                    half_probs[i] = half_probs_1[i];\n                    half_paths[i] = half_paths_1[i];\n                }\n            }\n        }\n\n        output_valid = input_valid;\n    }\n}\n\n// TODO this is a weird construct, what does this even mean in context?\n// TODO should we allow arithmetic on bool arrays?\nfn uint_not(n: uint, v: uint(n)) -> uint(n) {\n    type ty = uint(n);\n    return ty.from_bits([!x for x in ty.to_bits(n)]);\n}\n\nconst {\n    const example_length = 3;\n    const example_generator = Generator(example_length).new(\n        generator_0=[true, true, true],\n        generator_1=[true, false, true]\n    );\n    const example_analog_bits = 8;\n    const example_depth = 4;\n\n    convcode_encoder(\n        length=example_length, generator=example_generator\n    );\n    convcode_decoder(\n        length=example_length, generator=example_generator,\n        analog_bits=example_analog_bits, depth=example_depth\n    );\n}\n"), "uri": String("file:///home/karel/Documents/hwlang/design/project/examples/convcode.kh"), "version": Number(7)}} })
got another non-blocking message
==> Notification(Notification { method: "textDocument/didOpen", params: Object {"textDocument": Object {"languageId": String("hwlang"), "text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\nconst a = [1, 2, 3/*test*/];\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\npub module top ports(\n    clk: in clock,\n    rst: in async bool,\n\n    x: in sync(clk, rst) bool,\n    y: out sync(clk, rst) bool,\n//    e: in sync(clk, rst) A,\n) {\n    reg out y = false;\n\n    clocked(clk, async rst) {\n        val a;\n        if (x) {\n            a = false;\n        } else {\n            a = false;\n//            a = true;\n        }\n\n        y = a;\n    }\n}\n\nenum A {\n}\n\nenum Derp {\n    Yes,\n    No,\n    Maybe,\n}"), "uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(9)}} })
doing background work
compile: building source database
<== Request(Request { id: RequestId(String("1")), method: "client/registerCapability", params: Object {"registrations": Array [Object {"id": String("0"), "method": String("workspace/didChangeWatchedFiles"), "registerOptions": Object {"watchers": Array [Object {"globPattern": Object {"baseUri": String("file:///home/karel/Documents/hwlang/design/project"), "pattern": String("**/hwl.toml")}}]}}]} })
<== Request(Request { id: RequestId(String("3")), method: "client/registerCapability", params: Object {"registrations": Array [Object {"id": String("2"), "method": String("workspace/didChangeWatchedFiles"), "registerOptions": Object {"watchers": Array [Object {"globPattern": Object {"baseUri": String("file:///home/karel/Documents/hwlang/design/project"), "pattern": String("**/hwl.toml")}}, Object {"globPattern": Object {"baseUri": String("file:///home/karel/Documents/hwlang/design/project/."), "pattern": String("**/*.kh")}}]}}]} })
sending diagnostics: 0
finished background work
waiting for message
==> Response(Response { id: RequestId(String("1")), result: None, error: None })
doing background work
finished background work
waiting for message
==> Response(Response { id: RequestId(String("3")), result: None, error: None })
doing background work
finished background work
waiting for message
==> Request(Request { id: RequestId(I32(1)), method: "textDocument/semanticTokens/full", params: Object {"textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/examples/convcode.kh")}} })
getting source for semantic tokens
finished tokenizing
<== Response(Response { id: RequestId(I32(1)), result: Some(Object {"data": Array [Number(0), Number(0), Number(6), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(0), Number(6), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(0), Number(6), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(0), Number(6), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(2), Number(0), Number(3), Number(5), Number(0), Number(0), Number(4), Number(6), Number(5), Number(0), Number(0), Number(23), Number(1), Number(6), Number(0), Number(1), Number(10), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(1), Number(13), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(5), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(1), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(3), Number(5), Number(5), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(3), Number(5), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(2), Number(4), Number(4), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(18), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(1), Number(19), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(2), Number(21), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(1), Number(21), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(4), Number(3), Number(5), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(4), Number(3), Number(5), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(4), Number(3), Number(5), Number(0), Number(0), Number(17), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(2), Number(4), Number(7), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(5), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(8), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(12), Number(20), Number(1), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(21), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(23), Number(1), Number(6), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(12), Number(17), Number(1), Number(0), Number(1), Number(26), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(26), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(3), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(30), Number(2), Number(6), Number(0), Number(0), Number(19), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(30), Number(2), Number(6), Number(0), Number(0), Number(19), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(1), Number(8), Number(1), Number(6), Number(0), Number(2), Number(21), Number(1), Number(6), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(2), Number(0), Number(3), Number(5), Number(0), Number(0), Number(4), Number(6), Number(5), Number(0), Number(0), Number(23), Number(1), Number(6), Number(0), Number(1), Number(10), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(1), Number(13), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(15), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(1), Number(9), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(5), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(1), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(3), Number(5), Number(5), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(3), Number(5), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(2), Number(4), Number(4), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(19), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(2), Number(19), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(17), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(8), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(3), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(22), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(22), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(2), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(4), Number(4), Number(5), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(4), Number(5), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(4), Number(5), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(4), Number(4), Number(5), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(2), Number(4), Number(5), Number(5), Number(0), Number(0), Number(23), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(4), Number(3), Number(5), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(4), Number(3), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(4), Number(3), Number(5), Number(0), Number(0), Number(4), Number(3), Number(5), Number(0), Number(0), Number(17), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(2), Number(4), Number(7), Number(5), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(5), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(8), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(12), Number(19), Number(1), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(17), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(7), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(16), Number(3), Number(5), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(1), Number(16), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(3), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(20), Number(40), Number(1), Number(0), Number(1), Number(20), Number(3), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(20), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(37), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(35), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(5), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(37), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(35), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(1), Number(16), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(1), Number(24), Number(1), Number(6), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(12), Number(40), Number(1), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(24), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(29), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(24), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(1), Number(29), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(3), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(16), Number(34), Number(1), Number(0), Number(1), Number(25), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(2), Number(12), Number(33), Number(1), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(16), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(12), Number(38), Number(1), Number(0), Number(1), Number(12), Number(3), Number(5), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(3), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(16), Number(3), Number(5), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(16), Number(40), Number(1), Number(0), Number(1), Number(16), Number(2), Number(5), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(2), Number(6), Number(0), Number(0), Number(12), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(30), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(30), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(16), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(5), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(1), Number(30), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(30), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(14), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(16), Number(1), Number(6), Number(0), Number(1), Number(12), Number(1), Number(6), Number(0), Number(1), Number(8), Number(1), Number(6), Number(0), Number(2), Number(21), Number(1), Number(6), Number(0), Number(0), Number(13), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(2), Number(0), Number(71), Number(1), Number(0), Number(1), Number(0), Number(50), Number(1), Number(0), Number(1), Number(0), Number(2), Number(5), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(3), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(2), Number(2), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(1), Number(4), Number(4), Number(5), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(6), Number(5), Number(0), Number(0), Number(9), Number(1), Number(6), Number(0), Number(0), Number(10), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(3), Number(3), Number(5), Number(0), Number(0), Number(6), Number(2), Number(5), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(8), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0), Number(2), Number(0), Number(5), Number(5), Number(0), Number(0), Number(6), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(21), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(24), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(1), Number(19), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(19), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(0), Number(1), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(0), Number(2), Number(5), Number(3), Number(0), Number(0), Number(5), Number(1), Number(6), Number(0), Number(0), Number(2), Number(4), Number(3), Number(0), Number(0), Number(4), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(26), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(4), Number(5), Number(5), Number(0), Number(0), Number(20), Number(1), Number(6), Number(0), Number(0), Number(2), Number(1), Number(3), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(2), Number(20), Number(1), Number(6), Number(0), Number(1), Number(14), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(20), Number(1), Number(6), Number(0), Number(1), Number(14), Number(1), Number(6), Number(0), Number(0), Number(15), Number(1), Number(6), Number(0), Number(0), Number(11), Number(1), Number(6), Number(0), Number(0), Number(18), Number(1), Number(6), Number(0), Number(1), Number(19), Number(1), Number(6), Number(0), Number(0), Number(20), Number(1), Number(6), Number(0), Number(0), Number(7), Number(1), Number(6), Number(0), Number(1), Number(4), Number(1), Number(6), Number(0), Number(0), Number(1), Number(1), Number(6), Number(0), Number(1), Number(0), Number(1), Number(6), Number(0)]}), error: None })
doing background work
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\npub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\nconst a = [1, 2, 3/*test*/];\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\npub module top ports(\n    clk: in clock,\n    rst: in async bool,\n\n    x: in sync(clk, rst) bool,\n    y: out sync(clk, rst) bool,\n//    e: in sync(clk, rst) A,\n) {\n    reg out y = false;\n\n    clocked(clk, async rst) {\n        val a;\n        if (x) {\n            a = false;\n        } else {\n            a = false;\n//            a = true;\n        }\n\n        y = a;\n    }\n}\n\nenum A {\n}\n\nenum Derp {\n    Yes,\n    No,\n    Maybe,\n}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(10)}} })
doing background work
compile: building source database
sending diagnostics: 0
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\npub module top ports(\n    clk: in clock,\n    rst: in async bool,\n\n    x: in sync(clk, rst) bool,\n    y: out sync(clk, rst) bool,\n//    e: in sync(clk, rst) A,\n) {\n    reg out y = false;\n\n    clocked(clk, async rst) {\n        val a;\n        if (x) {\n            a = false;\n        } else {\n            a = false;\n//            a = true;\n        }\n\n        y = a;\n    }\n}\n\nenum A {\n}\n\nenum Derp {\n    Yes,\n    No,\n    Maybe,\n}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(11)}} })
doing background work
compile: building source database
sending diagnostics: 0
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\npub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\nconst a = [1, 2, 3/*test*/];\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\npub module top ports(\n    clk: in clock,\n    rst: in async bool,\n\n    x: in sync(clk, rst) bool,\n    y: out sync(clk, rst) bool,\n//    e: in sync(clk, rst) A,\n) {\n    reg out y = false;\n\n    clocked(clk, async rst) {\n        val a;\n        if (x) {\n            a = false;\n        } else {\n            a = false;\n//            a = true;\n        }\n\n        y = a;\n    }\n}\n\nenum A {\n}\n\nenum Derp {\n    Yes,\n    No,\n    Maybe,\n}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(12)}} })
doing background work
compile: building source database
sending diagnostics: 0
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\npub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(13)}} })
doing background work
compile: building source database
sending diagnostics: 1
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width: uint = 8;\nconst output_width = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(14)}} })
doing background work
compile: building source database
sending diagnostics: 1
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width: uint = 8;\nconst output_width = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\nconst a = x + y + z;\n\n// TODO should this care about operator precedence or not??\nconst a =\n    x\n    + y\n    * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(15)}} })
doing background work
compile: building source database
sending diagnostics: 8
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(30)}, "start": Object {"character": Number(6), "line": Number(30)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(27)}, "start": Object {"character": Number(6), "line": Number(27)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(5), "line": Number(31)}, "start": Object {"character": Number(4), "line": Number(31)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(32)}, "start": Object {"character": Number(6), "line": Number(32)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(33)}, "start": Object {"character": Number(6), "line": Number(33)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(27)}, "start": Object {"character": Number(10), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(15), "line": Number(27)}, "start": Object {"character": Number(14), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(19), "line": Number(27)}, "start": Object {"character": Number(18), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width: uint = 8;\nconst output_width = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\nconst a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\nconst a =\n    x\n    + y\n    * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(16)}} })
doing background work
compile: building source database
sending diagnostics: 8
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(31)}, "start": Object {"character": Number(6), "line": Number(31)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(27)}, "start": Object {"character": Number(6), "line": Number(27)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(5), "line": Number(32)}, "start": Object {"character": Number(4), "line": Number(32)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(33)}, "start": Object {"character": Number(6), "line": Number(33)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(34)}, "start": Object {"character": Number(6), "line": Number(34)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(27)}, "start": Object {"character": Number(10), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(15), "line": Number(27)}, "start": Object {"character": Number(14), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(19), "line": Number(27)}, "start": Object {"character": Number(18), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width: uint = 8;\nconst output_width = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\nconst a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\nconst a =\n    x\n    + y * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(17)}} })
doing background work
compile: building source database
sending diagnostics: 8
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(31)}, "start": Object {"character": Number(6), "line": Number(31)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(27)}, "start": Object {"character": Number(6), "line": Number(27)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(27)}, "start": Object {"character": Number(10), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(15), "line": Number(27)}, "start": Object {"character": Number(14), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(19), "line": Number(27)}, "start": Object {"character": Number(18), "line": Number(27)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(5), "line": Number(32)}, "start": Object {"character": Number(4), "line": Number(32)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(33)}, "start": Object {"character": Number(6), "line": Number(33)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(33)}, "start": Object {"character": Number(10), "line": Number(33)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n//const input_width: uint = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\nconst a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\nconst a =\n    x\n    + y * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(18)}} })
doing background work
compile: building source database
sending diagnostics: 8
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(33)}, "start": Object {"character": Number(6), "line": Number(33)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(29)}, "start": Object {"character": Number(6), "line": Number(29)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(29)}, "start": Object {"character": Number(10), "line": Number(29)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(15), "line": Number(29)}, "start": Object {"character": Number(14), "line": Number(29)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(19), "line": Number(29)}, "start": Object {"character": Number(18), "line": Number(29)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `x`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(5), "line": Number(34)}, "start": Object {"character": Number(4), "line": Number(34)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `y`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(7), "line": Number(35)}, "start": Object {"character": Number(6), "line": Number(35)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `z`\nidentifier not declared"), "range": Object {"end": Object {"character": Number(11), "line": Number(35)}, "start": Object {"character": Number(10), "line": Number(35)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: searched in the scope starting here and its parents")}], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n//const input_width: uint = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n//const a = [1, 2, 3/*test*/];\n\n//const a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\n//const a =\n//    x\n//    + y * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(19)}} })
doing background work
compile: building source database
sending diagnostics: 1
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n//const input_width: uint = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n\nconst a = [1, 2, 3];\nconst a = [1, 2, 3,];\nconst a = [\n    1,\n    2,\n    3,\n];\n\n//const a = [1, 2, 3/*test*/];\n\n//const a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\n//const a =\n//    x\n//    + y * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(20)}} })
doing background work
compile: building source database
sending diagnostics: 3
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(29)}, "start": Object {"character": Number(6), "line": Number(29)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(28)}, "start": Object {"character": Number(6), "line": Number(28)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("identifier `a` declared multiple times\ndeclared again here"), "range": Object {"end": Object {"character": Number(7), "line": Number(30)}, "start": Object {"character": Number(6), "line": Number(30)}}, "relatedInformation": Array [Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(28)}, "start": Object {"character": Number(6), "line": Number(28)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}, Object {"location": Object {"range": Object {"end": Object {"character": Number(7), "line": Number(29)}, "start": Object {"character": Number(6), "line": Number(29)}}, "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")}, "message": String("info: previously declared here")}], "severity": Number(1), "source": String("HWLang-LSP")}, Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
==> Notification(Notification { method: "textDocument/didChange", params: Object {"contentChanges": Array [Object {"text": String("import std.types.[bool, int, uint, natural, any];\nimport std.math.[gcd, min, max];\nimport std.util.[print, assert];\nimport examples.axi_gearbox.axi_gearbox;\nimport examples.axi_stream.[axi_stream, axi_passthrough];\n\nconst input_width = 8;\nconst output_width = 8;\n\n//const input_width: uint = 8;\n\n//pub struct SomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongNameSomeVeryLongName {\n//}\n\n//import\n//    a\n//    .b\n//    .c\n//    .d\n//    .[a, b, c];\n//\n//val a = 4\n//    + 6\n//    + 6\n//    + 7\n\n\n\n//const a = [1, 2, 3];\n//const a = [1, 2, 3,];\n//const a = [\n//    1,\n//    2,\n//    3,\n//];\n\n//const a = [1, 2, 3/*test*/];\n\n//const a = x + y + z;\n\n// TODO should this care about operator precedence or not??\n//   maybe flatten for ops with the same precedence, but nest for different precedence?\n//const a =\n//    x\n//    + y * z;\n\n// TODO fix empty enums\n// TODO skip match arm checking for compile-time values\n// TODO fix current crash, \"Range must be valid, got 0..=-1\", also related to empty enums\n//pub module top ports(\n//    clk: in clock,\n//    rst: in async bool,\n//\n//    x: in sync(clk, rst) bool,\n//    y: out sync(clk, rst) bool,\n////    e: in sync(clk, rst) A,\n//) {\n//    reg out y = false;\n//\n//    clocked(clk, async rst) {\n//        val a;\n//        if (x) {\n//            a = false;\n//        } else {\n//            a = false;\n////            a = true;\n//        }\n//\n//        y = a;\n//    }\n//}\n//\n//enum A {\n//}\n//\n//enum Derp {\n//    Yes,\n//    No,\n//    Maybe,\n//}")}], "textDocument": Object {"uri": String("file:///home/karel/Documents/hwlang/design/project/top.kh"), "version": Number(21)}} })
doing background work
compile: building source database
sending diagnostics: 1
<== Notification(Notification { method: "textDocument/publishDiagnostics", params: Object {"diagnostics": Array [Object {"message": String("undeclared identifier `top`\nsearched in the scope starting here"), "range": Object {"end": Object {"character": Number(0), "line": Number(0)}, "start": Object {"character": Number(0), "line": Number(0)}}, "relatedInformation": Array [], "severity": Number(1), "source": String("HWLang-LSP")}], "uri": String("file:///home/karel/Documents/hwlang/design/project/./top.kh")} })
finished background work
waiting for message
