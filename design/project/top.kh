module test_module(WIDTH: uint) ports(
    clk: in clock,
    rst: in async bool,
    data_in: in sync(clk, rst) uint(WIDTH),
    data_out: out sync(clk, rst) uint(WIDTH),

    derp: in async bool,
    test: out async bool,
) {
    reg out test_marker=42;
    wire intermediate: sync(clk, rst) uint(WIDTH);

    wire derp = false;
    reg counter: sync(clk, rst) uint = 0;

    if (WIDTH > 8) {
        wire extra_signal: sync(clk, rst) bool;
    }

    for (i in [0, 1, 2]) {
        wire data_bit: sync(clk, rst) bool;
    }

    comb {
        val x = false;
        intermediate = data_in + 1;
        print(1);

        print(2);
    }

    clocked(clk, async rst) {
        counter += 1;
        if (counter > 10) {
            counter = 0;
        }
        data_out = intermediate;
    }

    instance some_sub_module ports(data=intermediate, enable=true);

    {}
}
