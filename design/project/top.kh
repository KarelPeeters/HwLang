import std.types.[
    bool, int_range, int, uint, natural,
    int_bits, uint_bits, any,
];
import std.math.[gcd, min, max];

pub module top ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
       enable: in bool,
       x: in int_range(0..256),
       y: out int_range(0..256),
    }
) body {
//    reg out y = 0;
//    reg d0: sync(clk, rst) int_range(0..256) = 0;
//    reg d1: sync(clk, rst) int_range(0..256) = 0;
//
//    clocked(clk, rst) {
//        if (enable) {
//            d1 = d0;
//            d0 = x;
//        }
//    }
//
//    instance child1 generics(int_range(0..256)) ports(
//        .clk(clk),
//        .rst(rst),
//        .x(d1),
//        .y(y),
//    );

    combinatorial {
        if (enable) {
            y = x;
        } else {
            y = 0;
        }
//        y = x;
    }
}

module child1 generics(T: type) ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
       x: in T,
       y: out T,
    }
) body {
    wire x_wire: sync(clk, rst) T = x;
    instance child2 generics(T) ports(
        .clk(clk),
        .rst(rst),
        .x(x_wire),
        .y(y),
    );
}

module child2 generics(T: type) ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
       x: in T,
       y: out T,
    }
) body {
    combinatorial {
        y = x;
    }
}