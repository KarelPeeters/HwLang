//function invert(const N: uint, x: bits(N)) -> bits(N) {
//    return !x;
//}

//use util.test.foo;
//use package.util.test.foo as _;
//foo();

use std::types::bool;
use std::types::bits;
use std::types::uint;
use std::types::int_range;
use std::types::uint_bits;

type TestType = bool;

//type foo(n: int_range(3..8)) = bits(n);
//type bar = foo(9);

//type a = b;
//type b = a;

type foo(n: int_range(0..5)) = bits(n);

pub module top ports (
    clk: input clock,
    reset: input async bool,
    buttons: input sync(clk) bits(4),
    leds: output sync(clk) bits(4),
) {
    combinatorial {
        // leds = invert(4, button);
        leds = !buttons;
    }

//    clocked(clk, reset) {
//        let state = delay(state, init=0);
//        leds = delay(button, init=x);
//    }

    // TODO is it possible to complain about multiple drivers at initial compile time?
//    for (i in 0..4) {
//        clocked(clk, reset) {
//            leds[i] = delay(button[i], init=0);
//        }
//    }
}

//module tree_reduce(
//    clk: input async clock,
//    reset: input async bit,
//
//    N: input const int,
//    f: function (sync(clk) T, sync(clk) T) -> sync(clk) T,
//
//    x: input sync(clk) Array(T, N),
//    y: output sync(clk) Option<T>,
//) {
//    clocked(clk, reset) {
//        let
//    }
//}