import std.types.[
    bool, int_range, int, uint, natural,
    int_bits, uint_bits, any,
];

pub module top ports(
    clk_a: in clock,
    clk_b: in clock,
    rst_a: in async bool,
    rst_b: in async bool,

    sync(clk_a, !rst_a) {
        in_a: in bool[4],
        out_a: out bool[4],
    },
    sync(clk_b, !rst_b) {
        in_select: in bool,
        in_b: in bool[4],
        in_c: in bool[4],
        out_b: out bool[4],
    },

    async {
        in_async: in bool[4],
        out_async: out bool[4],

        in_int_range: in int_range(-3..27),
        in_int_bits: in int_bits(3),
        in_uint_bits: in uint_bits(3),
    }
) body {
    const test_pos: int = 8;

    reg pass: sync(clk_a, !rst_a) bool = false;
    reg out out_a = undefined;
    clocked(clk_a, !rst_a) {
        pass = !pass;
        if (pass) {
            out_a = in_a;
        }
    }

    combinatorial {
        out_async = identity(any, in_async);
    }

    instance child generics(
        N=4,
        f=identity,
    ) ports(
        .clk(clk_b),
        .rst(!rst_b),
        .x(select(bool[4], in_select, in_b, in_c)),
        .y(out_b),
    );
}

module child generics(
    N: uint,
    f: any,
) ports(
    clk: in clock,
    rst: in async bool,
    x: in sync(clk, rst) bool[N],
    y: out sync(clk, rst) bool[N],
) body {
    combinatorial {
        y = f(bool[N], x);
    }
}

type type_alias = bool[8, 4];

function identity(T: type, x: T) -> T {
    return x;
}

function select(T: type, c: bool, x: T, y: T) -> T {
    var result: T;
    if (c) {
        result = x;
    } else {
        result = y;
    }
    return result;
}
