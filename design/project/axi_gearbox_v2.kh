//// Translation of https://github.com/MaartenBaert/axi_fifos/blob/gearbox/vhdl/rtl/axi_gearbox_v2.vhd
//import std.types.[natural, bool, bits, int_range];
//import std.math.[gcd, clog2, min];
//
//module axi_gearbox_v2 generics(
//    input_width: natural,
//    output_width: natural,
//) ports (
//    clk: in clock,
//    rst: in async bool,
//
//    // input
//    input_data: in sync(clk, rst) bits(input_width),
//    input_valid: in sync(clk, rst) bool,
//    input_ready: out sync(clk, rst) bool,
//
//    // output
//    output_data: out sync(clk, rst) bits(output_width),
//    output_valid: out sync(clk, rst) bool,
//    output_ready: in sync(clk, rst) bool,
//) body {
//    val step = gcd(input_width, output_width);
//    val buffer_size = input_width + output_width + min(input_width, output_width) - step;
//    val shift_bits = clog2((buffer_size - input_width) / step + 1);
//
//    reg buffer: sync(clk, rst) bits(buffer_size) = undefined;
//    reg level: sync(clk, rst) int_range(0 ..= (buffer_size / step)) = 0;
//
//    combinatorial {
//        output_data = buffer[0..output_width];
//        output_valid = level >= output_width / step;
//        input_ready = level <= (buffer_size - input_width) / step;
//    }
//
//    clocked (clk, rst) {
//        // handle input
//        if (input_valid && level <= (buffer_size - input_width) / step) {
//            // TODO actually do something here
//        };
//
//        // handle output
//        if (output_ready && level >= output_width / step) {
//            buffer[0..buffer_size - output_width] = buffer[output_width..buffer_size];
//            level -= output_width / step;
//        };
//    }
//}
