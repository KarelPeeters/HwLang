import std.types.[bool, int, uint, natural, any, Option];
import std.math.[gcd, min, max];
import std.util.[typeof, print];

pub module top ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
        enable: in bool,
        x: in int(0..256),
        y: out int(0..256),
        t: out bool,
    }
) body {
    reg d0: sync(clk, rst) int(0..256) = 0;
    reg d1: sync(clk, rst) int(0..256) = 0;
    reg out t = false;

    clocked(clk, async rst) {
        if (enable) {
            d1 = d0;
            d0 = x;
        }
        t = select(bool, enable, false, true);
    }

    instance child(
        T=int(0..256)
    ) ports(
        clk,
        rst,
        x=d1,
        y,
    );
}

fn select(T: type, c: bool, a: T, b: T) -> bool {
    var result: T;
    if (c) {
        result = a;
    } else {
        result = b;
    }
    return result;
}

module child(T: type) ports(
    clk: in clock,
    rst: in async bool,

    sync(clk, rst) {
        x: in T,
        y: out T,
    }
) body {
    comb {
        y = x;
    }
}

struct Pair(T: type) {
    x: T,
    y: T,
}

enum Either(L: type, R: type) {
    Left(L),
    Right(R),
}

interface AxiStream(T: type) {
    data: T,
    valid: bool,
    ready: bool,

    interface input { data: in, valid: in, ready: out }
    interface output { data: out, valid: out, ready: in }
}
