//use std::str::FromStr;
use crate::parse::ast::*;
use crate::parse::pos::*;

grammar;

match {
    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`

    // pass everything else through
    _,
}

pub PackageContent: PackageContent = {
    Item* => PackageContent { items: <>, span: Span::dummy() }
};

// items
Item: Item = {
    "type" <id:Id> <params:TypeParams> <inner:("=" Expr)?> ";" =>
        Item::Type(ItemDefType { id, inner: inner.map(|(_, inner)| Box::new(inner)), params, span: Span::dummy() }),
};

TypeParams: Params = {
    => Params { params: vec![], span: Span::dummy() },
    "(" <params:Params> ")" => params,
}

#[inline]
Params: Params = {
    Separated<Param, ","> => Params { params: <>, span: Span::dummy() },
};

Param: Param = {
    <id:Id> ":" <ty:Expr> => Param { dir: None, kind: ParamKind::Named { id, default: None }, ty, span: Span::dummy() },
};

// expressions
Expr: Expression = ExprLevelReturn;

ExprLevelReturn: Expression = {
    ExprLevelAssign,
}

ExprLevelAssign: Expression = {
    ExprLevelIn,
}

ExprLevelIn: Expression = {
    // assoc none
    <left: ExprLevelRange> "in" <right:ExprLevelRange> => build_binary_op(BinaryOp::In, left, right),
    ExprLevelRange,
}

ExprLevelRange: Expression = {
    // assoc none
    <left: ExprLevelLogical> ".." <right: ExprLevelLogical> => build_binary_op(BinaryOp::Range, left, right),
    <left: ExprLevelLogical> "..=" <right: ExprLevelLogical> => build_binary_op(BinaryOp::RangeInclusive, left, right),
    ExprLevelLogical,
}

ExprLevelLogical: Expression = {
    // assoc left, no mixing
    <left: ExprLevelLogicalAnd> "&&" <right: ExprLevelEqual> => build_binary_op(BinaryOp::BoolAnd, left, right),
    <left: ExprLevelLogicalOr> "||" <right: ExprLevelEqual> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: Expression = {
    <left: ExprLevelLogicalAnd> "&&" <right: ExprLevelEqual> => build_binary_op(BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: Expression = {
    <left: ExprLevelLogicalOr> "||" <right: ExprLevelEqual> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: Expression = {
    // assoc none
    <left: ExprLevelBitWise> "==" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpEq, left, right),
    <left: ExprLevelBitWise> "!=" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpNeq, left, right),
    <left: ExprLevelBitWise> ">=" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpGte, left, right),
    <left: ExprLevelBitWise> ">" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpGt, left, right),
    <left: ExprLevelBitWise> "<=" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpLte, left, right),
    <left: ExprLevelBitWise> "<" <right: ExprLevelBitWise> => build_binary_op(BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: Expression = {
    // assoc left
    <left: ExprLevelBitWise> "&" <right: ExprLevelShift> => build_binary_op(BinaryOp::BitAnd, left, right),
    <left: ExprLevelBitWise> "^" <right: ExprLevelShift> => build_binary_op(BinaryOp::BitXor, left, right),
    <left: ExprLevelBitWise> "|" <right: ExprLevelShift> => build_binary_op(BinaryOp::BitOr, left, right),
    ExprLevelShift,
}

ExprLevelShift: Expression = {
    // assoc none
    <left: ExprLevelAdd> "<<" <right: ExprLevelAdd> => build_binary_op(BinaryOp::Shl, left, right),
    <left: ExprLevelAdd> ">>" <right: ExprLevelAdd> => build_binary_op(BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: Expression = {
    // assoc left
    <left: ExprLevelAdd> "+" <right: ExprLevelMul> => build_binary_op(BinaryOp::Add, left, right),
    <left: ExprLevelAdd> "-" <right: ExprLevelMul> => build_binary_op(BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: Expression = {
    // assoc left
    <left: ExprLevelMul> "*" <right: ExprLevelUnary> => build_binary_op(BinaryOp::Mul, left, right),
    <left: ExprLevelMul> "/" <right: ExprLevelUnary> => build_binary_op(BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <left: ExprLevelMul> "%" <right: ExprLevelUnary> => build_binary_op(BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: Expression = {
    "!" <inner: ExprLevelPower> => Expression { kind: ExpressionKind::UnaryOp(UnaryOp::Not, Box::new(inner)), span: Span::dummy() },
    "-" <inner: ExprLevelPower> => Expression { kind: ExpressionKind::UnaryOp(UnaryOp::Neg, Box::new(inner)), span: Span::dummy() },
    ExprLevelPower,
};

ExprLevelPower: Expression = {
    <left: ExprLevelCall> "**" <right: ExprLevelCall> => build_binary_op(BinaryOp::Pow, left, right),
    ExprLevelCall,
}

ExprLevelCall: Expression = {
    <target:ExprAtomic> "(" <args:CallArgs> ")" =>
        Expression { kind: ExpressionKind::Call(Box::new(target), args), span: Span::dummy() },
    <target:ExprAtomic> "[" <args:CallArgs> "]" =>
        Expression { kind: ExpressionKind::ArrayIndex(Box::new(target), args), span: Span::dummy() },
    ExprAtomic,
};

ExprAtomic: Expression = {
    // parentheses
    "(" <expr:Expr> ")" => expr,
    // path
    <parents: (<Id> "::")*> <id: Id> =>
        Expression { kind: ExpressionKind::Path(Path { span: Span::dummy(), parents, id }), span: Span::dummy() },
    // literals
    "true" => Expression { kind: ExpressionKind::BoolLiteral(true), span: Span::dummy() },
    "false" => Expression { kind: ExpressionKind::BoolLiteral(false), span: Span::dummy() },
    r"0x[0-9a-fA-F_]+" => Expression { kind: ExpressionKind::IntPattern(IntPattern::Hex(<>.to_owned())), span: Span::dummy() },
    r"0b[0-9a-fA-F_]+" => Expression { kind: ExpressionKind::IntPattern(IntPattern::Bin(<>.to_owned())), span: Span::dummy() },
    r"[0-9]+" => Expression { kind: ExpressionKind::IntPattern(IntPattern::Dec(<>.to_owned())), span: Span::dummy() },
};

// supporting blocks
// TODO what does inline do?
#[inline]
CallArgs: Args = {
    // TODO support named args
    <positional:Separated<Expr, ",">> =>
        Args { positional, named: vec![], span: Span::dummy() },
};

// terminals
Id: Identifier = {
    r"[a-zA-Z_][a-zA-Z_0-9]*" => Identifier { string: <>.to_owned(), span: Span::dummy() },
};

// utilities
#[inline]
Separated<T, S>: Vec<T> = { // (1)
    <mut v:(<T> S)*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

