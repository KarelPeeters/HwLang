//use std::str::FromStr;
use crate::syntax::ast::*;
use crate::syntax::pos::*;

// TODO what does inline do?
grammar(loc: &LocationBuilder<'_>);

match {
    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`

    // pass everything else through
    _,
}

pub FileContent: FileContent = {
    <start:@L> <items: Item*> <end:@R> => FileContent { items, span: loc.span(start, end) }
}

// items
Item: Item = {
    <start:@L> <vis:Vis> "type" <id:Id> <params:Params<TypeParam>?> "=" <inner:BoxExpr> ";" <end:@R>
        => Item::Type(ItemDefType { vis, id, inner, params, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "struct" <id:Id> <params:Params<TypeParam>?> "{" <fields: Separated<StructField, ",">> "}" <end:@R>
        => Item::Struct(ItemDefStruct { vis, id, params, fields, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "enum" <id:Id> <params:Params<TypeParam>?> "{" <variants: Separated<EnumVariant, ",">> "}" <end:@R>
        => Item::Enum(ItemDefEnum { vis, id, params, variants, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "module" <id:Id> <params:Params<ModuleParam>?> <body:Block> <end:@R>
        => Item::Module(ItemDefModule { vis, id, params, body, span: loc.span(start, end) }),
    // We only allow tightly-bounding expressions in the return type to avoid (formal) ambiguity.
    <start:@L> <vis:Vis> "function" <id:Id> <params:Params<FunctionParam>> <ret_ty: ("->" <Spanned<ExprLevelCallNoStruct>>)?> <body:Block> <end:@R>
        => Item::Function(ItemDefFunction { vis, id, params, ret_ty, body, span: loc.span(start, end) }),
}

EnumVariant: EnumVariant = {
    <start:@L> <id:Id> <content:("(" <Expr> ")")?> <end:@R>
        => EnumVariant { id, content, span: loc.span(start, end) },
}

StructField: StructField = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R>
        => StructField { id, ty, span: loc.span(start, end) },
}

Block: Block = {
    <start:@L> "{" <statements:Statement*> "}" <end:@R>
        => Block { statements, span: loc.span(start, end) },
}

Statement: Statement = {
    // declaration
    <start:@L> <kind:DeclarationKind> <id:MaybeId> <ty: (":" <BoxExpr>)?> <init: ("=" <BoxExpr>)?> ";" <end:@R> => {
        let decl = Declaration { kind, id, ty, init, span: loc.span(start, end) };
        Statement { kind: StatementKind::Declaration((decl)), span: loc.span(start, end) }
    },
    // assignment
    <start:@L> <target:BoxExpr> <op:AssignOp> <value:BoxExpr> ";" <end:@R> => {
        let assignment = Assignment { op, target, value, span: loc.span(start, end) };
        Statement { kind: StatementKind::Assignment(assignment), span: loc.span(start, end) }
    },
    // combinatorial block
    <start:@L> "combinatorial" <block:Box<Block>> <end:@R> => {
        let inner = CombinatorialBlock { block, span: loc.span(start, end) };
        Statement { kind: StatementKind::CombinatorialBlock(inner), span: loc.span(start, end) }
    },
    <start:@L> "clocked" "(" <clock:BoxExpr> "," <reset:BoxExpr> ")" <block:Box<Block>> <end:@R> => {
        let inner = ClockedBlock { clock, reset, block, span: loc.span(start, end) };
        Statement { kind: StatementKind::ClockedBlock(inner), span: loc.span(start, end) }
    },
    // expression
    // TODO semicolon is optional for control flow statements and the last expression in a block
    <start:@L> <inner:BoxExpr> ";" <end:@R> => Statement { kind: StatementKind::Expression(inner), span: loc.span(start, end) },
}

DeclarationKind: DeclarationKind = {
    "const" => DeclarationKind::Const,
    "val" => DeclarationKind::Val,
    "var" => DeclarationKind::Var,
}

// parameters
Params<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P, ",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

TypeParam: TypeParam = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => TypeParam { id, ty, span: loc.span(start, end) },
}

FunctionParam: FunctionParam = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => FunctionParam { id, ty, span: loc.span(start, end) },
}

ModuleParam: ModuleParam = {
    <start:@L> <id:Id> ":" <kind:ModuleParamKind> <sync: SyncKind> <ty:Expr> <end:@R>
        => ModuleParam { id, kind, sync, ty, span: loc.span(start, end) },
}

ModuleParamKind = Spanned<ModuleParamKindInner>;

ModuleParamKindInner: ModuleParamKind = {
    "const" => ModuleParamKind::Const,
    "input" => ModuleParamKind::Input,
    "output" => ModuleParamKind::Output,
}

SyncKind = Spanned<SyncKindInner>;

SyncKindInner: SyncKind = {
    "async" => SyncKind::Async,
    "sync" "(" <BoxExpr> ")" => SyncKind::Sync(<>),
}

// expressions
Expr: Expression = Spanned<ExprLevelReturn>;
BoxExpr: Box<Expression> = Box<Expr>;

ExprLevelReturn: ExpressionKind = {
    "return" <value:BoxExpr?> => ExpressionKind::Return(value),
    "break" <value:BoxExpr?> => ExpressionKind::Break(value),
    "continue" => ExpressionKind::Continue,
    ExprLevelRange,
}

ExprLevelRange: ExpressionKind = {
    // assoc none
    <range_start: BoxSpanned<ExprLevelLogical>?> ".." <range_end: BoxSpanned<ExprLevelLogical>?>
        => ExpressionKind::Range { end_inclusive: false, start: range_start, end: range_end },
    <range_start: BoxSpanned<ExprLevelLogical>?> "..=" <range_end: BoxSpanned<ExprLevelLogical>?>
        => ExpressionKind::Range { end_inclusive: true, start: range_start, end: range_end },
    ExprLevelLogical,
}

ExprLevelLogical: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelLogicalAnd>> "&&" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolAnd, left, right),
    <left:Spanned<ExprLevelLogicalOr>> "||" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalAnd>> "&&" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalOr>> "||" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelBitWise>> "==" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpEq, left, right),
    <left:Spanned<ExprLevelBitWise>> "!=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpNeq, left, right),
    <left:Spanned<ExprLevelBitWise>> ">=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpGte, left, right),
    <left:Spanned<ExprLevelBitWise>> ">" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpGt, left, right),
    <left:Spanned<ExprLevelBitWise>> "<=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpLte, left, right),
    <left:Spanned<ExprLevelBitWise>> "<" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelBitWise>> "&" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitAnd, left, right),
    <left:Spanned<ExprLevelBitWise>> "^" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitXor, left, right),
    <left:Spanned<ExprLevelBitWise>> "|" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitOr, left, right),
    ExprLevelShift,
}

ExprLevelShift: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelAdd>> "<<" <right:Spanned<ExprLevelAdd>> => build_binary_op(BinaryOp::Shl, left, right),
    <left:Spanned<ExprLevelAdd>> ">>" <right:Spanned<ExprLevelAdd>> => build_binary_op(BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelAdd>> "+" <right:Spanned<ExprLevelMul>> => build_binary_op(BinaryOp::Add, left, right),
    <left:Spanned<ExprLevelAdd>> "-" <right:Spanned<ExprLevelMul>> => build_binary_op(BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelMul>> "*" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Mul, left, right),
    <left:Spanned<ExprLevelMul>> "/" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <left:Spanned<ExprLevelMul>> "%" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: ExpressionKind = {
    "!" <inner:BoxSpanned<ExprLevelPower>> => ExpressionKind::UnaryOp(UnaryOp::Not, inner),
    "-" <inner:BoxSpanned<ExprLevelPower>> => ExpressionKind::UnaryOp(UnaryOp::Neg, inner),
    ExprLevelPower,
}

ExprLevelPower: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelCall>> "**" <right:Spanned<ExprLevelCall>> => build_binary_op(BinaryOp::Pow, left, right),
    ExprLevelCall,
}

ExprLevelCall = ExprLevelCallGeneric<ExprLevelStructInit>;
ExprLevelCallNoStruct = ExprLevelCallGeneric<ExprLevelAtomic>;

ExprLevelCallGeneric<AtomicInner>: ExpressionKind = {
    <target:BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "(" <args:CallArgs> ")" =>
        ExpressionKind::Call(target, args),
    <target:BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "[" <args:CallArgs> "]" =>
        ExpressionKind::ArrayIndex(target, args),
    ExprLevelDotIndex<AtomicInner>,
}

CallArgs: Args = {
    // TODO support named args
    <start:@L> <inner:Separated<Expr, ",">> <end:@L> =>
        Args { inner, span: loc.span(start, end) },
}

ExprLevelDotIndex<AtomicInner>: ExpressionKind = {
    // assoc left
    <target: BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "." <index: Id>
        => ExpressionKind::DotIdIndex(target, index),
    <target: BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "." <index: Spanned<r"[0-9]+">>
        => ExpressionKind::DotIntIndex(target, index.map_inner(|s| s.to_string())),
    ExprLevelStructureInit<AtomicInner>,
}

ExprLevelStructureInit<AtomicInner>: ExpressionKind = {
    // initializers
    //  tuples
    "(" <values:SeparatedAtLeastOneSep<Expr, ",">> ")" => ExpressionKind::TupleLiteral(values),
    //  array
    "[" <elements:Separated<Expr, ",">> "]" => ExpressionKind::ArrayLiteral(elements),
    AtomicInner,
}

ExprLevelStructInit: ExpressionKind = {
    //  struct
    // TODO allow struct type params?
    // <struct_ty:Id> "{" "}" => todo!(),
    <struct_ty:ExprLevelCall> "{" <fields:Separated<StructLiteralField, ",">> "}" => todo!(),
//        ExpressionKind::StructLiteral(StructLiteral { struct_ty, fields }),
    ExprLevelAtomic,
}

StructLiteralField: StructLiteralField = {
    <start:@L> <id:Id> ":" <value:Expr> <end:@R> => StructLiteralField { id, value, span: loc.span(start, end) },
}

ExprLevelAtomic: ExpressionKind = {
    // parentheses
    "(" <expr:BoxExpr> ")" => ExpressionKind::Wrapped(expr),
    // block
    <block:Block> => ExpressionKind::Block(block),
    // path
    <path:Path> => ExpressionKind::Path(path),
    // special case TODO why does this not get parsed as an identifier?
    "type" => ExpressionKind::Type,
    "_" => ExpressionKind::Dummy,
    // literals
    "true" => ExpressionKind::BoolLiteral(true),
    "false" => ExpressionKind::BoolLiteral(false),
    <string:r"0x[0-9a-fA-F_]+">
        => ExpressionKind::IntPattern(IntPattern::Hex(string.to_owned())),
    <string:r"0b[0-9a-fA-F_]+">
        => ExpressionKind::IntPattern(IntPattern::Bin(string.to_owned())),
    <string:r"[0-9]+">
        => ExpressionKind::IntPattern(IntPattern::Dec(string.to_owned())),
    // TODO escape sequences
    <full:r#""[^"]*""#> => {
        let string = full[1..full.len()-1].to_owned();
        ExpressionKind::StringLiteral(string.to_owned())
    },

    // control flow
    ExprControlFlow,
}

ExprControlFlow: ExpressionKind = {
    // if
    "if" "(" <cond:BoxExpr> ")" <then_block:Block> <else_if_pairs:ElseIfPair*> <else_block:("else" <Block>)?>
        => ExpressionKind::If(IfExpression { cond, then_block, else_if_pairs, else_block }),
    // loop
    "loop" <body:Block>
        => ExpressionKind::Loop(LoopExpression { body }),
    // for
    "for" "(" <index:MaybeId> <index_ty: (":" <BoxExpr>)?> "in" <iter:BoxExpr> ")" <body:Block>
        => ExpressionKind::For(ForExpression { index, index_ty, iter, body }),
    // while
    "while" "(" <cond:BoxExpr> ")" <body:Block>
        => ExpressionKind::While(WhileExpression { cond, body }),
}

Path: Path = {
    <start:@L> <parents: (<Id> "::")*> <id: Id> <end:@R>
        => Path { span: loc.span(start, end), parents, id }
}

ElseIfPair: ElseIfPair = {
    <start:@L> "else" "if" "(" <cond:BoxExpr> ")" <block:Block> <end:@R>
        => ElseIfPair { cond, block, span: loc.span(start, end) },
}

// terminals
Id: Identifier = {
    <start:@L> <string:r"(_[a-zA-Z_0-9]+)|([a-zA-Z][a-zA-Z_0-9]*)"> <end:@R>
        => Identifier { string: string.to_owned(), span: loc.span(start, end) },
}

MaybeId: MaybeIdentifier = {
    <start:@L> "_" <end:@R> => MaybeIdentifier::Dummy(loc.span(start, end)),
    <id:Id> => MaybeIdentifier::Identifier(id),
}

Vis: Visibility = {
    <start:@L> "pub" <end:@R> => Visibility::Public(loc.span(start, end)),
    => Visibility::Private,
}

AssignOp: Spanned<Option<BinaryOp>> = Spanned<AssignOpInner>;

AssignOpInner: Option<BinaryOp> = {
    "=" => None,
    "+=" => Some(BinaryOp::Add),
    "-=" => Some(BinaryOp::Sub),
    "*=" => Some(BinaryOp::Mul),
    "/=" => Some(BinaryOp::Div),
    "%=" => Some(BinaryOp::Mod),
    "&=" => Some(BinaryOp::BitAnd),
    "^=" => Some(BinaryOp::BitXor),
    "|=" => Some(BinaryOp::BitOr),
}

// utilities
Separated<T, S>: Vec<T> = { // (1)
    <mut v:(<T> S)*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

SeparatedAtLeastOneSep<T, S>: Vec<T> = { // (1)
    <mut v:(<T> S)+> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Box<T>: Box<T> = {
    T => Box::new(<>),
}

Spanned<T>: Spanned<T> = {
    <start:@L> <inner:T> <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

BoxSpanned<T>: Box<Spanned<T>> = Box<Spanned<T>>;
