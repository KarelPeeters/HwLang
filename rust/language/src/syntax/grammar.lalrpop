//use std::str::FromStr;
use crate::syntax::ast::*;
use crate::syntax::pos::*;

// TODO what does inline do?
grammar(loc: &LocationBuilder<'_>);

match {
    // Skip whitespace and comments
    r"\s*" => { },
    r"//[^\n\r]*[\n\r]*" => { }, // `// comment`
    r"/\*([^\*]*\*+[^\*/])*([^\*]*\*+|[^\*])*\*/" => { }, // `/* comment */`

    // pass everything else through
    _,
}

pub FileContent: FileContent = {
    <start:@L> <items: Item*> <end:@R> => FileContent { items, span: loc.span(start, end) }
}

// items
Item: Item = {
    <start:@L> <vis:Vis> "type" <id:Id> <params:Params<TypeParam>?> "=" <inner:Box<Expr>> ";" <end:@R> =>
        Item::Type(ItemDefType { vis, id, inner, params, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "struct" <id:Id> <params:Params<TypeParam>?> "{" <fields: Separated<StructField, ",">> "}" <end:@R> =>
        Item::Struct(ItemDefStruct { vis, id, params, fields, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "enum" <id:Id> <params:Params<TypeParam>?> "{" <variants: Separated<EnumVariant, ",">> "}" <end:@R> =>
        Item::Enum(ItemDefEnum { vis, id, params, variants, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "module" <id:Id> <params:Params<ModuleParam>?> <body:Block> <end:@R> =>
        Item::Module(ItemDefModule { vis, id, params, body, span: loc.span(start, end) }),
    // We only allow tightly-bounding expressions in the return type to avoid (formal) ambiguity.
    <start:@L> <vis:Vis> "function" <id:Id> <params:Params<FunctionParam>> <ret_ty: ("->" <ExprLevelCallNoStruct>)?> <body:Block> <end:@R> =>
       Item::Function(ItemDefFunction { vis, id, params, ret_ty, body, span: loc.span(start, end) }),
}

EnumVariant: EnumVariant = {
    <start:@L> <id:Id> <params:Params<Expr>?> <end:@R> => EnumVariant { id, params, span: loc.span(start, end) },
}

StructField: StructField = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => StructField { id, ty, span: loc.span(start, end) },
}

Block: Block = {
    <start:@L> "{" <statements:Statement*> "}" <end:@R> => Block { statements, span: loc.span(start, end) },
}

Statement: Statement = {
    // declaration
    <start:@L> <kind:DeclarationKind> <id:MaybeId> <ty: (":" <Box<Expr>>)?> <init: ("=" <Box<Expr>>)?> ";" <end:@R> => {
        Statement { kind: StatementKind::Declaration(Declaration {
            kind, id, ty, init, span: loc.span(start, end),
        }), span: loc.span(start, end) }
    },
    // assignment
    <start:@L> <target:Box<Expr>> <op:AssignOp> <value:Box<Expr>> ";" <end:@R> => {
        let assignment = Assignment { op, target, value, span: loc.span(start, end) };
        Statement { kind: StatementKind::Assignment(assignment), span: loc.span(start, end) }
    },
    // combinatorial block
    <start:@L> "combinatorial" <block:Box<Block>> <end:@R> => {
        let inner = CombinatorialBlock { block, span: loc.span(start, end) };
        Statement { kind: StatementKind::CombinatorialBlock(inner), span: loc.span(start, end) }
    },
    <start:@L> "clocked" "(" <clock:Box<Expr>> "," <reset:Box<Expr>> ")" <block:Box<Block>> <end:@R> => {
        let inner = ClockedBlock { clock, reset, block, span: loc.span(start, end) };
        Statement { kind: StatementKind::ClockedBlock(inner), span: loc.span(start, end) }
    },
    // expression
    // TODO semicolon is optional for control flow statements and the last expression in a block
    <start:@L> <inner:Box<Expr>> ";" <end:@R> => Statement { kind: StatementKind::Expression(inner), span: loc.span(start, end) },
}

DeclarationKind: DeclarationKind = {
    "const" => DeclarationKind::Const,
    "val" => DeclarationKind::Val,
    "var" => DeclarationKind::Var,
}

// parameters
Params<P>: Params<P> = {
    <start:@L> "(" <params: Separated<P, ",">> ")" <end:@R> => Params { params, span: loc.span(start, end) },
}

TypeParam: TypeParam = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => TypeParam { id, ty, span: loc.span(start, end) },
}

FunctionParam: FunctionParam = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => FunctionParam { id, ty, span: loc.span(start, end) },
}

ModuleParam: ModuleParam = {
    <start:@L> <id:Id> ":" <kind:ModuleParamKind> <sync: SyncKind> <ty:Expr> <end:@R> => ModuleParam { id, kind, sync, ty, span: loc.span(start, end) },
}

ModuleParamKind: ModuleParamKind = {
    "const" => ModuleParamKind::Const,
    "input" => ModuleParamKind::Input,
    "output" => ModuleParamKind::Output,
}

SyncKind: SyncKind = {
    "async" => SyncKind::Async,
    "sync" "(" <Box<Expr>> ")" => SyncKind::Sync(<>),
}

// expressions
Expr: Expression = ExprLevelReturn;

ExprLevelReturn: Expression = {
    <start:@L> "return" <value:Box<Expr>?> <end:@R> => Expression { kind: ExpressionKind::Return(value), span: loc.span(start, end) },
    <start:@L> "break" <value:Box<Expr>?> <end:@R> => Expression { kind: ExpressionKind::Break(value), span: loc.span(start, end) },
    <start:@L> "continue" <end:@R> => Expression { kind: ExpressionKind::Continue, span: loc.span(start, end) },
    ExprLevelRange,
}

ExprLevelRange: Expression = {
    // assoc none
    <start:@L> <range_start: Box<ExprLevelLogical>?> ".." <range_end: Box<ExprLevelLogical>?> <end:@R> => {
        let kind = ExpressionKind::Range { end_inclusive: false, start: range_start, end: range_end };
        Expression { kind, span: loc.span(start, end) }
    },
    <start:@L> <range_start: Box<ExprLevelLogical>?> "..=" <range_end: Box<ExprLevelLogical>?> <end:@R> => {
        let kind = ExpressionKind::Range { end_inclusive: true, start: range_start, end: range_end };
        Expression { kind, span: loc.span(start, end) }
    },
    ExprLevelLogical,
}

ExprLevelLogical: Expression = {
    // assoc left, no mixing
    <start:@L> <left: ExprLevelLogicalAnd> "&&" <right: ExprLevelEqual> <end:@R> => build_binary_op(BinaryOp::BoolAnd, left, right),
    <start:@L> <left: ExprLevelLogicalOr> "||" <right: ExprLevelEqual> <end:@R> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: Expression = {
    <start:@L> <left: ExprLevelLogicalAnd> "&&" <right: ExprLevelEqual> <end:@R> => build_binary_op(BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: Expression = {
    <start:@L> <left: ExprLevelLogicalOr> "||" <right: ExprLevelEqual> <end:@R> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: Expression = {
    // assoc none
    <start:@L> <left: ExprLevelBitWise> "==" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpEq, left, right),
    <start:@L> <left: ExprLevelBitWise> "!=" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpNeq, left, right),
    <start:@L> <left: ExprLevelBitWise> ">=" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpGte, left, right),
    <start:@L> <left: ExprLevelBitWise> ">" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpGt, left, right),
    <start:@L> <left: ExprLevelBitWise> "<=" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpLte, left, right),
    <start:@L> <left: ExprLevelBitWise> "<" <right: ExprLevelBitWise> <end:@R> => build_binary_op(BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: Expression = {
    // assoc left
    <start:@L> <left: ExprLevelBitWise> "&" <right: ExprLevelShift> <end:@R> => build_binary_op(BinaryOp::BitAnd, left, right),
    <start:@L> <left: ExprLevelBitWise> "^" <right: ExprLevelShift> <end:@R> => build_binary_op(BinaryOp::BitXor, left, right),
    <start:@L> <left: ExprLevelBitWise> "|" <right: ExprLevelShift> <end:@R> => build_binary_op(BinaryOp::BitOr, left, right),
    ExprLevelShift,
}

ExprLevelShift: Expression = {
    // assoc none
    <start:@L> <left: ExprLevelAdd> "<<" <right: ExprLevelAdd> <end:@R> => build_binary_op(BinaryOp::Shl, left, right),
    <start:@L> <left: ExprLevelAdd> ">>" <right: ExprLevelAdd> <end:@R> => build_binary_op(BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: Expression = {
    // assoc left
    <start:@L> <left: ExprLevelAdd> "+" <right: ExprLevelMul> <end:@R> => build_binary_op(BinaryOp::Add, left, right),
    <start:@L> <left: ExprLevelAdd> "-" <right: ExprLevelMul> <end:@R> => build_binary_op(BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: Expression = {
    // assoc left
    <start:@L> <left: ExprLevelMul> "*" <right: ExprLevelUnary> <end:@R> => build_binary_op(BinaryOp::Mul, left, right),
    <start:@L> <left: ExprLevelMul> "/" <right: ExprLevelUnary> <end:@R> => build_binary_op(BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <start:@L> <left: ExprLevelMul> "%" <right: ExprLevelUnary> <end:@R> => build_binary_op(BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: Expression = {
    <start:@L> "!" <inner:Box<ExprLevelPower>> <end:@R> => Expression { kind: ExpressionKind::UnaryOp(UnaryOp::Not, inner), span: loc.span(start, end) },
    <start:@L> "-" <inner:Box<ExprLevelPower>> <end:@R> => Expression { kind: ExpressionKind::UnaryOp(UnaryOp::Neg, inner), span: loc.span(start, end) },
    ExprLevelPower,
}

ExprLevelPower: Expression = {
    // assoc none
    <start:@L> <left: ExprLevelCall> "**" <right: ExprLevelCall> <end:@R> => build_binary_op(BinaryOp::Pow, left, right),
    ExprLevelCall,
}

ExprLevelCall = ExprLevelCallGeneric<ExprLevelStructInit>;
ExprLevelCallNoStruct = ExprLevelCallGeneric<ExprLevelAtomic>;

ExprLevelCallGeneric<AtomicInner>: Expression = {
    <start:@L> <target:Box<ExprLevelDotIndex<AtomicInner>>> "(" <args:CallArgs> ")" <end:@R> =>
        Expression { kind: ExpressionKind::Call(target, args), span: loc.span(start, end) },
    <start:@L> <target:Box<ExprLevelDotIndex<AtomicInner>>> "[" <args:CallArgs> "]" <end:@R> =>
        Expression { kind: ExpressionKind::ArrayIndex(target, args), span: loc.span(start, end) },
    ExprLevelDotIndex<AtomicInner>,
}

CallArgs: Args = {
    // TODO support named args
    <start:@L> <positional:Separated<Expr, ",">> <end:@R> =>
        Args { positional, named: vec![], span: loc.span(start, end) },
}

ExprLevelDotIndex<AtomicInner>: Expression = {
    // assoc left
    <start:@L> <target: Box<ExprLevelDotIndex<AtomicInner>>> "." <index: Id> <end:@R> => Expression { kind: ExpressionKind::DotIdIndex(target, index), span: loc.span(start, end) },
    <start:@L> <target: Box<ExprLevelDotIndex<AtomicInner>>> "." <index: r"[0-9]+"> <end:@R> => {
        let index = Spanned { span: loc.span(start, end), inner: index.parse().unwrap() };
        Expression { kind: ExpressionKind::DotIntIndex(target, index), span: loc.span(start, end) }
    },
    ExprLevelStructureInit<AtomicInner>,
}

ExprLevelStructureInit<AtomicInner>: Expression = {
    // initializers
    //  tuples
    <start:@L> "(" <values:SeparatedAtLeastOneSep<Expr, ",">> ")" <end:@R> => Expression { kind: ExpressionKind::TupleLiteral(values), span: loc.span(start, end) },
    //  array
    <start:@L> "[" <elements:Separated<Expr, ",">> "]" <end:@R> => Expression { kind: ExpressionKind::ArrayLiteral(elements), span: loc.span(start, end) },
    AtomicInner,
}

ExprLevelStructInit: Expression = {
    //  struct
    // TODO allow struct type params?
    // <start:@L> <struct_ty:Id> "{" "}" <end:@R> => todo!(),
    <start:@L> <struct_ty:ExprLevelCall> "{" <fields:Separated<StructLiteralField, ",">> "}" <end:@R> => todo!(),
//        Expression { kind: ExpressionKind::StructLiteral(StructLiteral { struct_ty, fields }), span: loc.span(start, end) },
    ExprLevelAtomic,
}

StructLiteralField: StructLiteralField = {
    <start:@L> <id:Id> ":" <value:Expr> <end:@R> => StructLiteralField { id, value, span: loc.span(start, end) },
}

ExprLevelAtomic: Expression = {
    // parentheses
    <start:@L> "(" <expr:Expr> ")" <end:@R> => expr,
    // block
    <start:@L> <block:Block> <end:@R> => Expression { kind: ExpressionKind::Block(block), span: loc.span(start, end) },
    // path
    <start:@L> <path:Path> <end:@R> => Expression { kind: ExpressionKind::Path(path), span: loc.span(start, end) },
    // special case TODO why does this not get parsed as an identifier?
    <start:@L> "type" <end:@R> => Expression { kind: ExpressionKind::Type, span: loc.span(start, end) },
    <start:@L> "_" <end:@R> => Expression { kind: ExpressionKind::Dummy, span: loc.span(start, end) },
    // literals
    <start:@L> "true" <end:@R> => Expression { kind: ExpressionKind::BoolLiteral(true), span: loc.span(start, end) },
    <start:@L> "false" <end:@R> => Expression { kind: ExpressionKind::BoolLiteral(false), span: loc.span(start, end) },
    <start:@L> <string:r"0x[0-9a-fA-F_]+"> <end:@R>
        => Expression { kind: ExpressionKind::IntPattern(IntPattern::Hex(string.to_owned())), span: loc.span(start, end) },
    <start:@L> <string:r"0b[0-9a-fA-F_]+"> <end:@R>
        => Expression { kind: ExpressionKind::IntPattern(IntPattern::Bin(string.to_owned())), span: loc.span(start, end) },
    <start:@L> <string:r"[0-9]+"> <end:@R>
        => Expression { kind: ExpressionKind::IntPattern(IntPattern::Dec(string.to_owned())), span: loc.span(start, end) },

    // control flow
    ExprControlFlow,
}

ExprControlFlow: Expression = {
    // if
    <start:@L> "if" "(" <cond:Box<Expr>> ")" <then_block:Block> <else_if_pairs:ElseIfPair*> <else_block:("else" <Block>)?> <end:@R>
        => Expression { kind: ExpressionKind::If(IfExpression {
            cond, then_block, else_if_pairs, else_block
        }), span: loc.span(start, end) },
    // loop
    <start:@L> "loop" <body:Block> <end:@R>
        => Expression { kind: ExpressionKind::Loop(LoopExpression { body }), span: loc.span(start, end) },
    // for
    <start:@L> "for" "(" <index:MaybeId> <index_ty: (":" <Box<Expr>>)?> "in" <iter:Box<Expr>> ")" <body:Block> <end:@R>
        => Expression { kind: ExpressionKind::For(ForExpression { index, index_ty, iter, body }), span: loc.span(start, end) },
    // while
    <start:@L> "while" "(" <cond:Box<Expr>> ")" <body:Block> <end:@R>
        => Expression { kind: ExpressionKind::While(WhileExpression { cond, body }), span: loc.span(start, end) },
}

Path: Path = {
    <start:@L> <parents: (<Id> "::")*> <id: Id> <end:@R>
        => Path { span: loc.span(start, end), parents, id }
}

ElseIfPair: ElseIfPair = {
    <start:@L> "else" "if" "(" <cond:Box<Expr>> ")" <block:Block> <end:@R>
        => ElseIfPair { cond, block, span: loc.span(start, end) },
}

// terminals
Id: Identifier = {
    <start:@L> <string:r"(_[a-zA-Z_0-9]+)|([a-zA-Z][a-zA-Z_0-9]*)"> <end:@R>
        => Identifier { string: string.to_owned(), span: loc.span(start, end) },
}

MaybeId: MaybeIdentifier = {
    <start:@L> "_" <end:@R> => MaybeIdentifier::Dummy(loc.span(start, end)),
    <id:Id> => MaybeIdentifier::Identifier(id),
}

Vis: Visibility = {
    <start:@L> "pub" <end:@R> => Visibility::Public(loc.span(start, end)),
    => Visibility::Private,
}

AssignOp: Option<BinaryOp> = {
    <start:@L> "=" <end:@R> => None,
    <start:@L> "+=" <end:@R> => Some(BinaryOp::Add),
    <start:@L> "-=" <end:@R> => Some(BinaryOp::Sub),
    <start:@L> "*=" <end:@R> => Some(BinaryOp::Mul),
    <start:@L> "/=" <end:@R> => Some(BinaryOp::Div),
    <start:@L> "%=" <end:@R> => Some(BinaryOp::Mod),
    <start:@L> "&=" <end:@R> => Some(BinaryOp::BitAnd),
    <start:@L> "^=" <end:@R> => Some(BinaryOp::BitXor),
    <start:@L> "|=" <end:@R> => Some(BinaryOp::BitOr),
}

// utilities
Separated<T, S>: Vec<T> = { // (1)
    <mut v:(<T> S)*> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

SeparatedAtLeastOneSep<T, S>: Vec<T> = { // (1)
    <mut v:(<T> S)+> <e:T?> => match e { // (2)
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Box<T>: Box<T> = {
    T => Box::new(<>),
}