import std.types.[
    bool, bits, int_range, int, uint, natural,
    int_bits, uint_bits, Array
];

type my_array(T: type, N: uint) = Array(T, N);
type vector = bits(4);

pub module top ports(
    clk_a: in clock,
    clk_b: in clock,
    rst_a: in async bool,
    rst_b: in async bool,

    in_a: in sync(clk_a, !rst_a) vector,
    in_b: in sync(clk_b, !rst_b) vector,
    out_a: out sync(clk_a, !rst_a) vector,
    out_b: out sync(clk_b, !rst_b) vector,

    in_async: in async vector,
    out_async: out async vector,

    in_int_range: in async int_range(-3..27),
    in_int_bits: in async int_bits(3),
    in_uint_bits: in async uint_bits(3),
) body {
    const test_pos: int = 8;
    //const test_neg: uint = test_pos; //type err

    combinatorial {
        out_a = in_a;
        //out_b = in_a; //sync err
        out_async = in_async;
    }

    clocked(clk_a, !rst_a) {
        out_a = in_a;
        //out_b = in_b; //sync err
    }

    instance child generics(N=4) ports(
        .clk(clk_a),
        .rst(!rst_a),
        .x(in_a),
        // .x(in_b), //sync err
        .y(out_a),
    );
}

function foo(T: type, x: T): T {
    //return 0; //type err
    return x;
}

module child generics(N: uint) ports(
    clk: in clock,
    rst: in async bool,
    x: in sync(clk, rst) bits(N),
    y: out sync(clk, rst) bits(N),
) body {
    combinatorial {
        y = x;
    }
}
