import std.types.[
    bool, bits, int_range, int, uint, natural,
    int_bits, uint_bits, Array, undefined
];

type my_array(T: type, N: uint) = Array(T, N);
type vector = bits(4);

pub module top ports(
    clk_a: in clock,
    clk_b: in clock,
    rst_a: in async bool,
    rst_b: in async bool,

    sync(clk_a, !rst_a) {
        in_a: in vector,
        out_a: out vector,
    },
    sync(clk_b, !rst_b) {
        in_b: in vector,
        out_b: out vector,
    },

    async {
        in_async: in vector,
        out_async: out vector,

        in_int_range: in int_range(-3..27),
        in_int_bits: in int_bits(3),
        in_uint_bits: in uint_bits(3),
    }
) body {
    const test_pos: int = 8;

    reg pass: sync(clk_a, !rst_a) bool = false;
    reg out out_a = undefined;
    clocked(clk_a, !rst_a) {
        if (pass) {
            out_a = in_a;
        }
        pass = !pass;
    }

    combinatorial {
        out_async = in_async;
    }

    instance child generics(N=4) ports(
        .clk(clk_b),
        .rst(!rst_b),
        .x(in_b),
        .y(out_b),
    );
}

function foo(T: type, x: T) -> T {
    return x;
}

module child generics(N: uint) ports(
    clk: in clock,
    rst: in async bool,
    x: in sync(clk, rst) bits(N),
    y: out sync(clk, rst) bits(N),
) body {
    combinatorial {
        y = x;
    }
}
