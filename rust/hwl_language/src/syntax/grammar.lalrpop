use crate::syntax::ast::*;
use crate::syntax::{Span, LocationBuilder};
use crate::syntax::token::{TokenType, TokenError};
use crate::util::arena::Arena;

// TODO move this boilerplate stuff to the bottom
grammar(loc: &LocationBuilder, arena_expr: &mut Arena<ExpressionKindIndex, ExpressionKind>);

extern {
    type Location = usize;
    type Error = TokenError;

    enum TokenType {
        TokenWhiteSpace => TokenType::WhiteSpace,
        TokenBlockComment => TokenType::BlockComment,
        TokenLineComment => TokenType::LineComment,
        TokenIdentifier => TokenType::Identifier,
        TokenIntLiteralBinary => TokenType::IntLiteralBinary,
        TokenIntLiteralDecimal => TokenType::IntLiteralDecimal,
        TokenIntLiteralHexadecimal => TokenType::IntLiteralHexadecimal,
        TokenStringStart => TokenType::StringStart,
        TokenStringEnd => TokenType::StringEnd,
        TokenStringSubStart => TokenType::StringSubStart,
        TokenStringSubEnd => TokenType::StringSubEnd,
        TokenStringMiddle => TokenType::StringMiddle,
        "import" => TokenType::Import,
        "type" => TokenType::Type,
        "struct" => TokenType::Struct,
        "enum" => TokenType::Enum,
        "ports" => TokenType::Ports,
        "module" => TokenType::Module,
        "interface" => TokenType::Interface,
        "instance" => TokenType::Instance,
        "fn" => TokenType::Function,
        "comb" => TokenType::Combinatorial,
        "clock" => TokenType::Clock,
        "clocked" => TokenType::Clocked,
        "const" => TokenType::Const,
        "val" => TokenType::Val,
        "var" => TokenType::Var,
        "wire" => TokenType::Wire,
        "reg" => TokenType::Reg,
        "in" => TokenType::In,
        "out" => TokenType::Out,
        "async" => TokenType::Async,
        "sync" => TokenType::Sync,
        "return" => TokenType::Return,
        "break" => TokenType::Break,
        "continue" => TokenType::Continue,
        "true" => TokenType::True,
        "false" => TokenType::False,
        "undef" => TokenType::Undefined,
        "if" => TokenType::If,
        "else" => TokenType::Else,
        "loop" => TokenType::Loop,
        "match" => TokenType::Match,
        "for" => TokenType::For,
        "while" => TokenType::While,
        "pub" => TokenType::Public,
        "as" => TokenType::As,
        "external" => TokenType::External,
        "__builtin" => TokenType::Builtin,
        "unsafe_value_with_domain" => TokenType::UnsafeValueWithDomain,
        "id_from_str" => TokenType::IdFromStr,
        ";" => TokenType::Semi,
        ":" => TokenType::Colon,
        "," => TokenType::Comma,
        "->" => TokenType::Arrow,
        "=>" => TokenType::DoubleArrow,
        "_" => TokenType::Underscore,
        "::" => TokenType::ColonColon,
        "{" => TokenType::OpenC,
        "}" => TokenType::CloseC,
        "(" => TokenType::OpenR,
        ")" => TokenType::CloseR,
        "[" => TokenType::OpenS,
        "]" => TokenType::CloseS,
        "." => TokenType::Dot,
        ".." => TokenType::Dots,
        "..=" => TokenType::DotsEq,
        "+.." => TokenType::PlusDots,
        "&&" => TokenType::AmperAmper,
        "||" => TokenType::PipePipe,
        "^^" => TokenType::CircumflexCircumflex,
        "==" => TokenType::EqEq,
        "!=" => TokenType::Neq,
        ">=" => TokenType::Gte,
        ">" => TokenType::Gt,
        "<=" => TokenType::Lte,
        "<" => TokenType::Lt,
        "&" => TokenType::Amper,
        "|" => TokenType::Pipe,
        "^" => TokenType::Circumflex,
        "<<" => TokenType::LtLt,
        ">>" => TokenType::GtGt,
        "+" => TokenType::Plus,
        "-" => TokenType::Minus,
        "*" => TokenType::Star,
        "/" => TokenType::Slash,
        "%" => TokenType::Percent,
        "!" => TokenType::Bang,
        "**" => TokenType::StarStar,
        "=" => TokenType::Eq,
        "+=" => TokenType::PlusEq,
        "-=" => TokenType::MinusEq,
        "*=" => TokenType::StarEq,
        "/=" => TokenType::SlashEq,
        "%=" => TokenType::PercentEq,
        "&=" => TokenType::AmperEq,
        "^=" => TokenType::CircumflexEq,
        "|=" => TokenType::BarEq,
    }
}

pub FileItems: Vec<Item> = {
    Item*,
}

// items
Item: Item = {
    <start:@L> "import" <parents:Spanned<(<Id> ".")+>> <entry:Spanned<ImportFinalKind>> ";" <end:@R>
        => Item::Import(ItemImport { parents, entry, span: loc.span(start, end) }),

    <decl:Spanned<CommonDeclaration<Vis>>>
        => Item::CommonDeclaration(decl),

    <start:@L>
        <vis:Vis> "module" <id:MaybeId>
        <params:(<Parameters>)?>
        <ports:ModulePorts>
        <body:Block<ModuleStatement>>
    <end:@R> => {
        Item::ModuleInternal(ItemDefModuleInternal { vis, id, params, ports, body, span: loc.span(start, end) })
    },
    <start:@L>
        <vis:Vis> <span_ext:Span<"external">> "module" <id:Id>
        <params:(<Parameters>)?>
        <ports:ModulePorts>
    <end:@R> => {
        Item::ModuleExternal(ItemDefModuleExternal { vis, span_ext, id, params, ports, span: loc.span(start, end) })
    },

    <start:@L>
        <vis:Vis> "interface" <id:MaybeId> <params:Parameters?> <start_body:@L> "{"
            <port_types:ExtraList<InterfacePortType>>
            <views:InterfaceView*>
        "}"
    <end:@R> => {
        let inter = ItemDefInterface {
            vis, id, params, port_types, views,
            span_body: loc.span(start_body, end), span: loc.span(start, end)
        };
        Item::Interface(inter)
    }
}

InterfaceView: InterfaceView  = {
    "interface" <id:MaybeId> "{" <port_dirs:ExtraList<InterfacePortDir>> "}" => {
        InterfaceView { id, port_dirs }
    }
}

InterfacePortType: (Identifier, Expression) = {
    <id:Id> ":" <ty:Expr> => (id, ty),
}

InterfacePortDir: (Identifier, Spanned<PortDirection>) = {
    <id:Id> ":" <dir:Spanned<PortDirection>> => (id, dir),
}

ImportFinalKind: ImportFinalKind = {
    ImportEntry => ImportFinalKind::Single(<>),
    "[" <Separated<ImportEntry,",">> "]" => ImportFinalKind::Multi(<>),
}

ImportEntry: ImportEntry = {
    <start:@L> <id:Id> <as_:("as" <MaybeId>)?> <end:@R>
        => ImportEntry { id, as_, span: loc.span(start, end) },
}

EnumVariant: EnumVariant = {
    <start:@L> <id:Id> <content:("(" <Expr> ")")?> <end:@R>
        => EnumVariant { id, content, span: loc.span(start, end) },
}

StructField: StructField = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R>
        => StructField { id, ty, span: loc.span(start, end) },
}

Block<S>: Block<S> = {
    <start:@L> "{" <statements:S*> "}" <end:@R> => {
        Block { statements, span: loc.span(start, end) }
    },
}

BlockSeparated<T, S>: Block<T> = {
    <start:@L> "{" <statements:Separated<T, S>> "}" <end:@R> => {
        Block { statements, span: loc.span(start, end) }
    },
}

ModuleStatement: ModuleStatement = Spanned<ModuleStatementKind>;
BlockStatement: BlockStatement = Spanned<BlockStatementKind>;

// TODO add scope block, just empty {} that shields registers etc from the top module scope
// TODO add module-level if, for
ModuleStatementKind: ModuleStatementKind = {
    // control flow
    Block<ModuleStatement> => ModuleStatementKind::Block(<>),
    IfStatement<Block<ModuleStatement>> => ModuleStatementKind::If(<>),
    ForStatement<ModuleStatement> => ModuleStatementKind::For(<>),
    // declaration
    <CommonDeclaration<()>> => ModuleStatementKind::CommonDeclaration(<>),
    <vis:Vis> "reg" <id:MaybeGeneralId> ":" <sync:(<Spanned<SyncDomain>>)?> <ty:Expr> "=" <init:Expr> ";" => {
        let decl = RegDeclaration { vis, id, sync, ty, init };
        ModuleStatementKind::RegDeclaration(decl)
    },
    // TODO allow clocks as wires
    <vis:Vis> "wire" <id:MaybeGeneralId> <kind:WireDeclarationKind> ";" => {
        let decl = WireDeclaration { vis, id, kind };
        ModuleStatementKind::WireDeclaration(decl)
    },
    // marker
    "reg" "out" <id:Id> "=" <init:Expr> ";" => {
        let decl = RegOutPortMarker { id, init };
        ModuleStatementKind::RegOutPortMarker(decl)
    },
    // combinatorial block
    <span_keyword:Span<"comb">> <end_keyword:@R> <block:Block<BlockStatement>> => {
        let inner = CombinatorialBlock {
            block,
            span_keyword,
        };
        ModuleStatementKind::CombinatorialBlock(inner)
    },
    // clocked block
    // TODO why is reset still part of the syntax here? only the registers themselves care, not the block?
    //   registers declared inside of the block do still inherit their clock/reset from the block though
    <span_keyword:Span<"clocked">> <start_domain:@L> <end_keyword:@R> "("
        <clock:Expr> <reset:("," <Spanned<ClockedBlockReset>>)?>
    ")" <end_domain:@R> <block:Block<BlockStatement>>
    => {
        let inner = ClockedBlock {
            clock,
            reset,
            block,
            span_keyword,
            span_domain: loc.span(start_domain, end_domain),
        };
        ModuleStatementKind::ClockedBlock(inner)
    },
    // module instance
    // TODO allow strings as instance names? necessary for modules instantiated in loops
    // TODO allow "if" here?
    <start:@L>
        "instance" <instance_end:@R> <name:(<Id> "=")?> <module:Expr>
        "ports" <port_connections:Spanned<InstancePortConnections>>
        ";"
    <end:@R> => {
        let instance = ModuleInstance {
            span_keyword: loc.span(start, instance_end),
            name,
            module,
            port_connections,
        };
        ModuleStatementKind::Instance(instance)
    },
}

InstancePortConnections: Vec<Spanned<PortConnection>> = {
    "(" <Separated<Spanned<PortConnection>,",">> ")"
}

// TODO find a way to avoid having to create a fake expression for the value here
PortConnection: PortConnection = {
    <id:Id> <expr:("=" <Expr>)?> => {
        let expr = expr.unwrap_or_else(|| {
            let kind = ExpressionKind::Id(GeneralIdentifier::Simple(id.clone()));
            Spanned::new(id.span, arena_expr.push(kind))
        });
        PortConnection { id, expr }
    }
}

ClockedBlockReset: ClockedBlockReset<Expression> = {
    <kind:Spanned<ResetKind>> <signal:Expr> => ClockedBlockReset { kind, signal },
}

ResetKind: ResetKind = {
    "sync" => ResetKind::Sync,
    "async" => ResetKind::Async,
}

BlockStatementKind: BlockStatementKind = {
    // declaration
    <CommonDeclaration<()>> => BlockStatementKind::CommonDeclaration(<>),
    <VariableDeclaration> => BlockStatementKind::VariableDeclaration(<>),
    // assignment
    <start:@L> <target:Expr> <op:AssignOp> <value:Expr> ";" <end:@R> => {
        let assignment = Assignment { op, target, value, span: loc.span(start, end) };
        BlockStatementKind::Assignment(assignment)
    },
    // expression
    // TODO semicolon is optional for control flow statements
    <start:@L> <inner:Expr> ";" <end:@R> => {
        BlockStatementKind::Expression(inner)
    },
    // block
    <Block<BlockStatement>> => BlockStatementKind::Block(<>),
    // control flow
    IfStatement<Block<BlockStatement>>
        => BlockStatementKind::If(<>),
    MatchStatement<Block<BlockStatement>>
        => BlockStatementKind::Match(<>),
    ForStatement<BlockStatement>
        => BlockStatementKind::For(<>),
    <span_keyword:Span<"while">> "(" <cond:Expr> ")" <body:Block<BlockStatement>>
        => BlockStatementKind::While(WhileStatement { span_keyword, cond, body }),
    // control flow terminators
    <span_return:Span<"return">> <value:Expr?> ";"
        => BlockStatementKind::Return(ReturnStatement { span_return, value }),
    <span:Span<"break">> ";" => BlockStatementKind::Break(span),
    <span:Span<"continue">> ";" => BlockStatementKind::Continue(span),
}

IfStatement<B>: IfStatement<B> = {
    <start:@L> <span_if:Span<"if">> "(" <cond:Expr> ")" <then_block:B> <end_if:@R>
    <else_ifs:ElseIfPair<B>*>
    <final_else:("else" <B>)?> => {
        IfStatement {
            initial_if: IfCondBlockPair {
                span: loc.span(start, end_if),
                span_if: span_if,
                cond: cond,
                block: then_block
            },
            else_ifs,
            final_else
        }
    },
}

// TODO don't require parentheses?
ElseIfPair<B>: IfCondBlockPair<B> = {
    <start:@L> "else" <span_if:Span<"if">> "(" <cond:Expr> ")" <block:B> <end:@R>
        => IfCondBlockPair { cond, block, span: loc.span(start, end), span_if },
}

// TODO don't require parentheses?
MatchStatement<B>: MatchStatement<B> = {
    "match" "(" <target:Expr> ")" "{" <start_branches:@L> <branches:MatchBranch<B>*> <end_branches:@R> "}"
        => MatchStatement { target, branches, span_branches: loc.span(start_branches, end_branches) },
}

MatchBranch<B>: MatchBranch<B> = {
    <pattern:Spanned<MatchPattern>> "=>" <block:B> => MatchBranch { pattern, block },
}

MatchPattern: MatchPattern = {
    <value:Expr> => MatchPattern::Equal(value),
    "val" <id:Id> => MatchPattern::Val(id),
    "in" <value:Expr> => MatchPattern::In(value),
    "." <variant:Id> <id_content:("(" <MaybeValId> ")")?> => MatchPattern::EnumVariant(variant, id_content),
}

MaybeValId: MaybeIdentifier = {
    "val" <MaybeId> => <>,
    Span<"_"> => MaybeIdentifier::Dummy(<>),
}

ForStatement<S>: ForStatement<S> = {
    <span_keyword:Span<"for">> "(" <index:MaybeId> <index_ty: (":" <ExprNoIn>)?> "in" <iter:ExprNoIn> ")" <body:Block<S>>
        => ForStatement { span_keyword, index, index_ty, iter, body },
}

CommonDeclaration<V>: CommonDeclaration<V> = {
    <vis:V> <kind:CommonDeclarationNamedKind>
        => CommonDeclaration::Named(CommonDeclarationNamed { vis, kind }),
    <span_keyword:Span<"const">> <block:Block<BlockStatement>>
        => CommonDeclaration::ConstBlock(ConstBlock { span_keyword, block }),
}

CommonDeclarationNamedKind: CommonDeclarationNamedKind = {
    <start:@L> "type" <id:MaybeId> <params:Parameters?> "=" <body:Expr> ";" <end:@R>
        => CommonDeclarationNamedKind::Type(TypeDeclaration { id, params, body, span: loc.span(start, end) }),

    <start:@L> "const" <id:MaybeId> <ty:(":" <Expr>)?> "=" <value:Expr> ";" <end:@R>
        => CommonDeclarationNamedKind::Const(ConstDeclaration { id, ty, value, span: loc.span(start, end) }),

    <start:@L>
        "struct" <id:MaybeId> <params:Parameters?>
        <start_body:@L> "{" <fields: ExtraList<StructField>> "}"
    <end:@R>
        => CommonDeclarationNamedKind::Struct(StructDeclaration { id, params, fields, span: loc.span(start, end), span_body: loc.span(start_body, end) }),

    <start:@L>
        "enum" <id:MaybeId> <params:Parameters?>
        "{" <variants: ExtraList<EnumVariant>> "}"
    <end:@R>
        => CommonDeclarationNamedKind::Enum(EnumDeclaration { id, params, variants, span: loc.span(start, end) }),

    // We only allow tightly-bounding expressions in the return type to avoid (formal) ambiguity.
    // TODO allow specifying "const" before function params to make error messages nicer
    <start:@L>
        "fn" <id:MaybeId> <params:Parameters>
        <ret_ty:("->" <ExprNoBlock>)?>
        <body:Block<BlockStatement>>
    <end:@R>
        => CommonDeclarationNamedKind::Function(FunctionDeclaration { id, params, ret_ty, body, span: loc.span(start, end) }),
}

VariableDeclaration: VariableDeclaration = {
    <start:@L> <mutable:VariableMutable> <id:MaybeId> <ty: (":"<Expr>)?> <init: ("="<Expr>)?> ";" <end:@R> => {
        VariableDeclaration { mutable, id, ty, init, span: loc.span(start, end) }
    },
}

VariableMutable: bool = {
    "val" => false,
    "var" => true,
}

// parameters
Parameters: Parameters = {
    <start:@L> "(" <items:ExtraList<Parameter>> ")" <end:@R>
        => Parameters { items, span: loc.span(start, end) },
}

Parameter: Parameter = {
    <id:Id> ":" <ty:Expr> <default:("=" <Expr>)?> => Parameter { id, ty, default },
}

ModulePorts: Spanned<ExtraList<ModulePortItem>> = {
    <start_ports:@L> "ports" "(" <ports:ExtraListE<ModulePortItemPort, ModulePortItemBlock>> ")" <end_ports:@R>
        => Spanned { span: loc.span(start_ports, end_ports), inner: ports },
}

ModulePortItemPort: ModulePortItem = {
    <start:@L> <id:Id> ":" <kind:ModulePortSingleKind> <end:@R>
        => ModulePortItem::Single(ModulePortSingle { id, kind, span: loc.span(start, end) }),
}

ModulePortItemBlock: ModulePortItem = {
    // TODO allow const domain here again, it conflicts with const blocks
    <start:@L> <domain:Spanned<AsyncOrSyncDomain>> <ports:ExtraBlock<ModulePortInBlock, (), "false">> <end:@R>
        => ModulePortItem::Block(ModulePortBlock { domain, ports, span: loc.span(start, end) }),
}

ModulePortInBlock: ModulePortInBlock = {
    <start:@L> <id:Id> ":" <kind:ModulePortInBlockKind> <end:@R>
        => ModulePortInBlock { id, kind, span: loc.span(start, end) },
}

ModulePortSingleKind: ModulePortSingleKind = {
    <direction:Spanned<PortDirection>> <kind:PortSingleKindInner>
        => ModulePortSingleKind::Port { direction, kind },
    <span_keyword:Span<"interface">> <domain:Spanned<DomainKind>> <interface:Expr>
        => ModulePortSingleKind::Interface { span_keyword, domain, interface },
}

PortSingleKindInner: PortSingleKindInner = {
    <span_clock:Span<"clock">> => PortSingleKindInner::Clock { span_clock },
    <domain:Spanned<DomainKind>> <ty:Expr> => PortSingleKindInner::Normal { domain, ty },
}

ModulePortInBlockKind: ModulePortInBlockKind = {
    <direction:Spanned<PortDirection>> <ty:Expr>
        => ModulePortInBlockKind::Port { direction, ty },
    <span_keyword:Span<"interface">> <interface:Expr>
        => ModulePortInBlockKind::Interface { span_keyword, interface },
}

ExtraList<I> = ExtraListImpl<I, (), "false">;
ExtraListE<I, E> = ExtraListImpl<I, E, "true">;

ExtraListImpl<I, E, has_e>: ExtraList<I> = {
    <items:Spanned<ExtraListItems<I, E, has_e>>> => {
        ExtraList { items: items.inner, span: items.span }
    }
}

ExtraBlock<I, E, has_e>: ExtraList<I> = {
    "{" <items:ExtraListImpl<I, E, has_e>> "}" => <>,
}

ExtraListItems<I, E, has_e>: Vec<ExtraItem<I>> = {
    <items:ExtraItem<I, E, has_e>*> <last:I?> => {
        let mut items = items;
        if let Some(last) = last {
            items.push(ExtraItem::Inner(last));
        }
        items
    }
}

ExtraItem<I, E, has_e>: ExtraItem<I> = {
    // leaf inner
    <I> "," => ExtraItem::Inner(<>),
    <E> if has_e == "true" => ExtraItem::Inner(<>),

    // declarations, these already include a trailing ";" if necessary
    <CommonDeclaration<()>> => ExtraItem::Declaration(<>),
    
    // control flow
    IfStatement<ExtraBlock<I, E, has_e>> => ExtraItem::If(<>),
    // TODO add match statement
}

WireDeclarationKind: WireDeclarationKind = {
    ":" <span_clock:Span<"clock">> <span_assign_and_value:(<Span<"=">> <Expr>)?>
        => WireDeclarationKind::Clock { span_clock, span_assign_and_value },
    
    // manually expanded because ":" should be present iff at least one of domain or ty is present
    ":" <domain:Spanned<DomainKind>> <ty:Expr> <span_assign:Span<"=">> <value:Expr>
        => WireDeclarationKind::NormalWithValue { domain: Some(domain), ty: Some(ty), span_assign, value },
    ":" <domain:Spanned<DomainKind>> <span_assign:Span<"=">> <value:Expr>
        => WireDeclarationKind::NormalWithValue { domain: Some(domain), ty: None, span_assign, value },
    ":" <ty:Expr> <span_assign:Span<"=">> <value:Expr>
        => WireDeclarationKind::NormalWithValue { domain: None, ty: Some(ty), span_assign, value },
    <span_assign:Span<"=">> <value:Expr>
        => WireDeclarationKind::NormalWithValue { domain: None, ty: None, span_assign, value },
    
    ":" <domain:(Spanned<DomainKind>)?> <ty:Expr>
        => WireDeclarationKind::NormalWithoutValue { domain, ty },
}

PortDirection: PortDirection = {
    "in" => PortDirection::Input,
    "out" => PortDirection::Output,
}

DomainKind: DomainKind<Expression> = {
    "const" => DomainKind::Const,
    AsyncOrSyncDomain,
}

AsyncOrSyncDomain: DomainKind<Expression> = {
   "async" => DomainKind::Async,
   <SyncDomain> => DomainKind::Sync(<>),
}

SyncDomain: SyncDomain<Expression> = {
    "sync" "(" <clock:Expr> <reset:("," <Expr>)?> ")" => SyncDomain { clock, reset },
}

// expressions
Expr: Expression = SpannedPushArena<ExprLevelIn>;
ExprNoIn: Expression = SpannedPushArena<ExprLevelRange>;
ExprNoBlock: Expression = SpannedPushArena<ExprLevelArrayImpl<"no">>;

PushArena<T>: ExpressionKindIndex = {
    T => arena_expr.push(<>)
}
SpannedPushArena<T>: Expression = Spanned<PushArena<T>>;

ExprLevelIn: ExpressionKind = {
    <value:Spanned<ExprLevelRange>> <op:Span<"in">> <range:Spanned<ExprLevelRange>>
        => build_binary_op(arena_expr, op, BinaryOp::In, value, range),
    ExprLevelRange,
}

ExprLevelRange: ExpressionKind = {
    // assoc none
    <start:SpannedPushArena<ExprLevelLogical>?> <op_span:Span<"..">> <end:SpannedPushArena<ExprLevelLogical>?>
        => ExpressionKind::RangeLiteral(RangeLiteral::ExclusiveEnd { op_span, start, end }),
    <start:SpannedPushArena<ExprLevelLogical>?> <op_span:Span<"..=">> <end:SpannedPushArena<ExprLevelLogical>>
        => ExpressionKind::RangeLiteral(RangeLiteral::InclusiveEnd { op_span, start, end }),
    <start:SpannedPushArena<ExprLevelLogical>> <op_span:Span<"+..">> <len:SpannedPushArena<ExprLevelLogical>>
        => ExpressionKind::RangeLiteral(RangeLiteral::Length { op_span, start, len }),
    ExprLevelLogical,
}

ExprLevelLogical: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelLogicalAnd>> <op:Span<"&&">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolAnd, left, right),
    <left:Spanned<ExprLevelLogicalOr>> <op:Span<"||">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolOr, left, right),
    <left:Spanned<ExprLevelLogicalXor>> <op:Span<"^^">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolXor, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalAnd>> <op:Span<"&&">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalOr>> <op:Span<"||">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalXor: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalXor>> <op:Span<"^^">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(arena_expr, op, BinaryOp::BoolXor, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelBitWise>> <op:Span<"==">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpEq, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"!=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpNeq, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<">=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpGte, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<">">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpGt, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"<=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpLte, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"<">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(arena_expr, op, BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelBitAnd>> <op:Span<"&">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitAnd, left, right),
    <left:Spanned<ExprLevelBitOr>> <op:Span<"|">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitOr, left, right),
    <left:Spanned<ExprLevelBitXor>> <op:Span<"^">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitXor, left, right),
    ExprLevelShift,
}
ExprLevelBitAnd: ExpressionKind = {
    <left:Spanned<ExprLevelBitAnd>> <op:Span<"&">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitAnd, left, right),
    ExprLevelShift,
}
ExprLevelBitOr: ExpressionKind = {
    <left:Spanned<ExprLevelBitOr>> <op:Span<"|">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitOr, left, right),
    ExprLevelShift,
}
ExprLevelBitXor: ExpressionKind = {
    <left:Spanned<ExprLevelBitXor>> <op:Span<"^">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(arena_expr, op, BinaryOp::BitXor, left, right),
    ExprLevelShift,
}

ExprLevelShift: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelAdd>> <op:Span<"<<">> <right:Spanned<ExprLevelAdd>> =>
        build_binary_op(arena_expr, op, BinaryOp::Shl, left, right),
    <left:Spanned<ExprLevelAdd>> <op:Span<">>">> <right:Spanned<ExprLevelAdd>> =>
        build_binary_op(arena_expr, op, BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelAdd>> <op:Span<"+">> <right:Spanned<ExprLevelMul>> =>
        build_binary_op(arena_expr, op, BinaryOp::Add, left, right),
    <left:Spanned<ExprLevelAdd>> <op:Span<"-">> <right:Spanned<ExprLevelMul>> =>
        build_binary_op(arena_expr, op, BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelMul>> <op:Span<"*">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(arena_expr, op, BinaryOp::Mul, left, right),
    <left:Spanned<ExprLevelMul>> <op:Span<"/">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(arena_expr, op, BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <left:Spanned<ExprLevelMul>> <op:Span<"%">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(arena_expr, op, BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: ExpressionKind = {
    <op:Span<"+">> <inner:SpannedPushArena<ExprLevelPower>> =>
        ExpressionKind::UnaryOp(Spanned { span: op, inner: UnaryOp::Plus }, inner),
    <op:Span<"-">> <inner:SpannedPushArena<ExprLevelPower>> =>
        ExpressionKind::UnaryOp(Spanned { span: op, inner: UnaryOp::Neg }, inner),
    <op:Span<"!">> <inner:SpannedPushArena<ExprLevelPower>> =>
        ExpressionKind::UnaryOp(Spanned { span: op, inner: UnaryOp::Not }, inner),
    ExprLevelPower,
}

ExprLevelPower: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelArray>> <op:Span<"**">> <right:Spanned<ExprLevelArray>> =>
        build_binary_op(arena_expr, op, BinaryOp::Pow, left, right),
    ExprLevelArray,
}

ExprLevelArray = ExprLevelArrayImpl<"true">;

ExprLevelArrayImpl<allow_block>: ExpressionKind = {
    // TODO find better array type syntax
    // TODO we can expand this one to allow `[4][3][2]ty` without causing ambiguity, maybe even remove `[2,3]ty`
    // array type
    "[" <args:Spanned<Separated<ArrayLiteralElement,",">>> "]" <target:SpannedPushArena<ExprLevelCall<allow_block>>>
        => ExpressionKind::ArrayType(args, target),
    // array index
    <target:SpannedPushArena<ExprLevelCall<allow_block>>> "[" <args:Spanned<Separated<Expr,",">>> "]"
        => ExpressionKind::ArrayIndex(target, args),

    // array literal
    "[" <Separated<ArrayLiteralElement,",">> "]"
        => ExpressionKind::ArrayLiteral(<>),
    // tuple literal
    "(" <SeparatedAtLeastOneSep<Expr,",">> ")"
        => ExpressionKind::TupleLiteral(<>),
    "(" ")" => ExpressionKind::TupleLiteral(vec![]),

    // array comprehension
    "[" <body:ArrayLiteralElement> "for" <index:MaybeId> <span_keyword:Span<"in">> <iter:ExprNoIn> "]"
        => ExpressionKind::ArrayComprehension(ArrayComprehension { body, index, span_keyword, iter }),

    ExprLevelCall<allow_block>,
}

ExprLevelCall<allow_block>: ExpressionKind = {
    // normal call
    <target:SpannedPushArena<ExprLevelDot<allow_block>>> "(" <args:Args> ")"
        => ExpressionKind::Call(target, args),

    // builtins
    "__builtin" "(" <args:Spanned<Separated<Expr,",">>> ")"
        => ExpressionKind::Builtin(args),
    "unsafe_value_with_domain" "(" <value:Expr> "," <domain:Spanned<DomainKind>> ")"
        => ExpressionKind::UnsafeValueWithDomain(value, domain),

    // reg expression
    <span_keyword:Span<"reg">> "(" <value:Expr> "," <init:Expr> ")"
        => ExpressionKind::RegisterDelay(RegisterDelay { span_keyword, value, init }),

    ExprLevelDot<allow_block>,
}

ExprLevelDot<allow_block>: ExpressionKind = {
    <target:SpannedPushArena<ExprLevelCall<allow_block>>> "." <index: Id>
        => ExpressionKind::DotIdIndex(target, index),
    <target:SpannedPushArena<ExprLevelCall<allow_block>>> "." <index:Span<TokenIntLiteralDecimal>>
        => ExpressionKind::DotIntIndex(target, index),

    ExprLevelAtomic<allow_block>,
}

// TODO allow "if" here
Args: Args = {
    <start:@L> <inner:Separated<Arg,",">> <end:@L> =>
        Args { inner, span: loc.span(start, end) },
}

Arg: Arg = {
    <start:@L> <name:(<Id> "=")?> <value:Expr> <end:@L> =>
        Arg { name, value, span: loc.span(start, end) },
}

ArrayLiteralElement: ArrayLiteralElement<Expression> = {
    // TODO allow multiple stars to flatten multi-dimensional arrays?
    <spread:Span<"*">> <value:Expr> => ArrayLiteralElement::Spread(spread, value),
    <value:Expr> => ArrayLiteralElement::Single(value),
}

StructLiteralField: StructLiteralField = {
    <start:@L> <id:Id> ":" <value:Expr> <end:@R> => StructLiteralField { id, value, span: loc.span(start, end) },
}

ExprLevelAtomic<allow_block>: ExpressionKind = {
    // parentheses grouping
    "(" <expr:Expr> ")" => ExpressionKind::Wrapped(expr),
    // block expression
    "{" <statements:BlockStatement*> <expression:Expr> "}" if allow_block == "true"
        => ExpressionKind::Block(BlockExpression { statements, expression }),
    // misc
    <id:GeneralId> => ExpressionKind::Id(id),
    "type" => ExpressionKind::Type,
    "fn" => ExpressionKind::TypeFunction,
    // TODO this should maybe not be an expression kind after all, there's only a few specific places it's allowed in
    "_" => ExpressionKind::Dummy,
    // literals
    "true" => ExpressionKind::BoolLiteral(true),
    "false" => ExpressionKind::BoolLiteral(false),
    "undef" => ExpressionKind::Undefined,
    <span:Span<TokenIntLiteralBinary>>
        => ExpressionKind::IntLiteral(IntLiteral::Binary(span)),
    <span:Span<TokenIntLiteralDecimal>>
        => ExpressionKind::IntLiteral(IntLiteral::Decimal(span)),
    <span:Span<TokenIntLiteralHexadecimal>>
        => ExpressionKind::IntLiteral(IntLiteral::Hexadecimal(span)),
    TokenStringStart <StringPiece*> TokenStringEnd
        => ExpressionKind::StringLiteral(<>),
}

StringPiece: StringPiece = {
    Span<TokenStringMiddle> => StringPiece::Literal(<>),
    TokenStringSubStart <Expr> TokenStringSubEnd => StringPiece::Substitute(<>),
}

//Path: Path = {
//    <start:@L> <steps: Spanned<(<Id> ".")*>> <id: Id> <end:@R>
//        => Path { span: loc.span(start, end), steps, id }
//}

// terminals
Id: Identifier = {
    <span:Span<TokenIdentifier>> => Identifier { span },
}

GeneralId: GeneralIdentifier = {
    Id => GeneralIdentifier::Simple(<>),
    Spanned<GeneralIdFromString> => GeneralIdentifier::FromString(<>.span, <>.inner),
}

GeneralIdFromString: Expression = {
    "id_from_str" "(" <Expr> ")",
}

MaybeId = MaybeIdImpl<Id>;
MaybeGeneralId = MaybeIdImpl<GeneralId>;

MaybeIdImpl<I>: MaybeIdentifier<I> = {
    <span:Span<"_">> => MaybeIdentifier::Dummy(span),
    I => MaybeIdentifier::Identifier(<>),
}

#[inline]
Vis: Visibility = {
    <span:Span<"pub">> => Visibility::Public(span),
    => Visibility::Private,
}

AssignOp: Spanned<Option<BinaryOp>> = Spanned<AssignOpInner>;

AssignOpInner: Option<BinaryOp> = {
    "=" => None,
    "+=" => Some(BinaryOp::Add),
    "-=" => Some(BinaryOp::Sub),
    "*=" => Some(BinaryOp::Mul),
    "/=" => Some(BinaryOp::Div),
    "%=" => Some(BinaryOp::Mod),
    "&=" => Some(BinaryOp::BitAnd),
    "^=" => Some(BinaryOp::BitXor),
    "|=" => Some(BinaryOp::BitOr),
}

// utilities
GroupedList<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P,",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

Separated<T, S>: Vec<T> = {
    <v:(<T> S)*> <e:T?> => {
        let mut v = v;
        if let Some(e) = e {
            v.push(e);
        }
        v
    }
}

SeparatedAtLeastOneSep<T, S>: Vec<T> = {
    <mut v:(<T> S)+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[inline]
Box<T>: Box<T> = {
    T => Box::new(<>),
}

#[inline]
BoxSpanned<T>: Box<Spanned<T>> = Box<Spanned<T>>;

#[inline]
Spanned<T>: Spanned<T> = {
    <start:@L> <inner:T> <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

#[inline]
Span<T>: Span = {
    <start:@L> <inner:T> <end:@R> => loc.span(start, end),
}
