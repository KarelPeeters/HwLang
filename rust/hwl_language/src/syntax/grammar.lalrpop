use crate::syntax::ast::*;
use crate::syntax::{Span, LocationBuilder};
use crate::syntax::token::{TokenType, TokenError};

// TODO move this boilerplate stuff to the bottom
grammar<'s>(loc: &LocationBuilder, input: &'s str);

// TODO skip whitespace and comment tokens again
extern {
    type Location = usize;
    type Error = TokenError;

    enum TokenType<&'s str> {
        TokenWhiteSpace => TokenType::WhiteSpace(<&'s str>),
        TokenLineComment => TokenType::LineComment(<&'s str>),
        TokenBlockComment => TokenType::BlockComment(<&'s str>),
        TokenIdentifier => TokenType::Identifier(<&'s str>),
        TokenIntLiteralDecimal => TokenType::IntLiteralDecimal(<&'s str>),
        TokenIntLiteralBinary => TokenType::IntLiteralBinary(<&'s str>),
        TokenIntLiteralHexadecimal => TokenType::IntLiteralHexadecimal(<&'s str>),
        TokenStringLiteral => TokenType::StringLiteral(<&'s str>),
        "import" => TokenType::Import,
        "as" => TokenType::As,
        "type" => TokenType::Type,
        "struct" => TokenType::Struct,
        "enum" => TokenType::Enum,
        "generics" => TokenType::Generics,
        "ports" => TokenType::Ports,
        "body" => TokenType::Body,
        "module" => TokenType::Module,
        "instance" => TokenType::Instance,
        "fn" => TokenType::Function,
        "comb" => TokenType::Combinatorial,
        "clock" => TokenType::Clock,
        "clocked" => TokenType::Clocked,
        "const" => TokenType::Const,
        "val" => TokenType::Val,
        "var" => TokenType::Var,
        "wire" => TokenType::Wire,
        "reg" => TokenType::Reg,
        "in" => TokenType::In,
        "out" => TokenType::Out,
        "async" => TokenType::Async,
        "sync" => TokenType::Sync,
        "return" => TokenType::Return,
        "break" => TokenType::Break,
        "continue" => TokenType::Continue,
        "true" => TokenType::True,
        "false" => TokenType::False,
        "undef" => TokenType::Undefined,
        "if" => TokenType::If,
        "else" => TokenType::Else,
        "loop" => TokenType::Loop,
        "for" => TokenType::For,
        "while" => TokenType::While,
        "pub" => TokenType::Public,
        "__builtin" => TokenType::Builtin,
        ";" => TokenType::Semi,
        ":" => TokenType::Colon,
        "," => TokenType::Comma,
        "->" => TokenType::Arrow,
        "_" => TokenType::Underscore,
        "::" => TokenType::ColonColon,
        "{" => TokenType::OpenC,
        "}" => TokenType::CloseC,
        "(" => TokenType::OpenR,
        ")" => TokenType::CloseR,
        "[" => TokenType::OpenS,
        "]" => TokenType::CloseS,
        "." => TokenType::Dot,
        ".." => TokenType::Dots,
        "..=" => TokenType::DotsEq,
        "..+" => TokenType::DotsPlus,
        "&&" => TokenType::AmperAmper,
        "||" => TokenType::PipePipe,
        "^^" => TokenType::CircumflexCircumflex,
        "==" => TokenType::EqEq,
        "!=" => TokenType::Neq,
        ">=" => TokenType::Gte,
        ">" => TokenType::Gt,
        "<=" => TokenType::Lte,
        "<" => TokenType::Lt,
        "&" => TokenType::Amper,
        "|" => TokenType::Pipe,
        "^" => TokenType::Circumflex,
        "<<" => TokenType::LtLt,
        ">>" => TokenType::GtGt,
        "+" => TokenType::Plus,
        "-" => TokenType::Minus,
        "*" => TokenType::Star,
        "/" => TokenType::Slash,
        "%" => TokenType::Percent,
        "!" => TokenType::Bang,
        "**" => TokenType::StarStar,
        "=" => TokenType::Eq,
        "+=" => TokenType::PlusEq,
        "-=" => TokenType::MinusEq,
        "*=" => TokenType::StarEq,
        "/=" => TokenType::SlashEq,
        "%=" => TokenType::PercentEq,
        "&=" => TokenType::AmperEq,
        "^=" => TokenType::CircumflexEq,
        "|=" => TokenType::BarEq,
    }
}

pub FileContent: FileContent = {
    <start:@L> <items: Item*> <end:@R> => FileContent { items, span: loc.span(start, end) }
}

// items
Item: Item = {
    <start:@L> "import" <parents:Spanned<(<Id> ".")+>> <entry:Spanned<ImportFinalKind>> ";" <end:@R>
        => Item::Import(ItemImport { parents, entry, span: loc.span(start, end) }),

    <vis:Vis> <decl:CommonDeclaration>
        => Item::CommonDeclaration(ItemDeclaration { vis, decl }),

    <start:@L>
        <vis:Vis> "module" <id:MaybeId>
        <params:("generics" <Parameters<Parameter>>)?>
        <start_ports:@L> "ports" "(" <ports:ModulePorts> ")" <end_ports:@R>
        "body" <body:Block<ModuleStatement>>
    <end:@R> => {
        let ports = Spanned { span: loc.span(start_ports, end_ports), inner: ports };
        Item::Module(ItemDefModule { vis, id, params, ports, body, span: loc.span(start, end) })
    },

    <start:@L>
        "instance" <instance_end:@R> <module:BoxExpr>
        <generic_args:("generics" "(" <Args> ")")?> ";"
    <end:@R> => {
        let span = loc.span(start, end);
        let span_keyword = loc.span(start, instance_end);
        let instance = ModuleInstanceHeader { span, span_keyword, module, generic_args };
        Item::Instance(instance)
    },
}

ImportFinalKind: ImportFinalKind = {
    ImportEntry => ImportFinalKind::Single(<>),
    "[" <Separated<ImportEntry, ",">> "]" => ImportFinalKind::Multi(<>),
}

ImportEntry: ImportEntry = {
    <start:@L> <id:Id> <as_:("as" <MaybeId>)?> <end:@R>
        => ImportEntry { id, as_, span: loc.span(start, end) },
}

EnumVariant: EnumVariant = {
    <start:@L> <id:Id> <content:("(" <Expr> ")")?> <end:@R>
        => EnumVariant { id, content, span: loc.span(start, end) },
}

StructField: StructField = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R>
        => StructField { id, ty, span: loc.span(start, end) },
}

Block<S>: Block<S> = {
    <start:@L> "{" <statements:S*> "}" <end:@R> => {
        Block { statements, span: loc.span(start, end) }
    },
}

ModuleStatement: ModuleStatement = Spanned<ModuleStatementKind>;
BlockStatement: BlockStatement = Spanned<BlockStatementKind>;

// TODO add scope block, just empty {} that shields registers etc from the top module scope
// TODO add module-level if, for
ModuleStatementKind: ModuleStatementKind = {
    // control flow
    Block<ModuleStatement> => ModuleStatementKind::Block(<>),
    IfStatement<ModuleStatement> => ModuleStatementKind::If(<>),
    ForStatement<ModuleStatement> => ModuleStatementKind::For(<>),
    // declaration
    <CommonDeclaration> => ModuleStatementKind::CommonDeclaration(<>),
    <start:@L> "reg" <id:MaybeId> ":" <sync:Spanned<SyncDomain>> <ty:BoxExpr> "=" <init:BoxExpr> ";" <end:@R> => {
        let decl = RegDeclaration { span: loc.span(start, end), id, sync, ty, init };
        ModuleStatementKind::RegDeclaration(decl)
    },
    // TODO allow clocks as wires
    <start:@L> "wire" <id:MaybeId> ":" <kind:Spanned<WireKind>> <value: ("=" <BoxExpr>)?> ";" <end:@R> => {
        let decl = WireDeclaration { span: loc.span(start, end), id, kind, value };
        ModuleStatementKind::WireDeclaration(decl)
    },
    // marker
    <start:@L> "reg" "out" <id:Id> "=" <init:BoxExpr> ";" <end:@R> => {
        let decl = RegOutPortMarker { span: loc.span(start, end), id, init };
        ModuleStatementKind::RegOutPortMarker(decl)
    },
    // combinatorial block
    <start:@L> "comb" <end_keyword:@R> <block:Block<BlockStatement>> <end:@R> => {
        let inner = CombinatorialBlock {
            block,
            span: loc.span(start, end),
            span_keyword: loc.span(start, end_keyword),
        };
        ModuleStatementKind::CombinatorialBlock(inner)
    },
    // clocked block
    // TODO why is reset still part of the syntax here? only the registers themselves care, not the block?
    //   registers declared inside of the block do still inherit their clock/reset from the block though
    <start:@L> "clocked" <end_keyword:@R> "(" <clock:BoxExpr> "," <reset:BoxExpr> ")" <block:Block<BlockStatement>> <end:@R> => {
        let inner = ClockedBlock {
            domain: Spanned { span: clock.span.join(reset.span), inner: SyncDomain { clock, reset } },
            block,
            span: loc.span(start, end),
            span_keyword: loc.span(start, end_keyword),
        };
        ModuleStatementKind::ClockedBlock(inner)
    },
    // module instance
    // TODO this is ugly syntax: why are generics and ports different
    // TODO allow strings as instance names? necessary for modules instantiated in loops
    <start:@L>
        "instance" <instance_end:@R> <name:(<Id> "=")?> <module:BoxExpr>
        <generic_args:("generics" "(" <Args> ")")?>
        "ports" "(" <port_connections:Spanned<Separated<Spanned<PortConnection>, ",">>> ")"
        ";"
    <end:@R> => {
        let instance = ModuleInstance {
            header: ModuleInstanceHeader {
                span_keyword: loc.span(start, instance_end),
                span: loc.span(start, end),
                module,
                generic_args,
            },
            name,
            port_connections,
        };
        ModuleStatementKind::Instance(instance)
    },
}

// TODO better port syntax, maybe including directionality, eg ==> and <== or -> and <-?
//   now it's different from both generics and struct literals
PortConnection: PortConnection = {
    "." <id:Id> "(" <expr:Expr> ")" => PortConnection { id, expr },
}

BlockStatementKind: BlockStatementKind = {
    // declaration
    <CommonDeclaration> => BlockStatementKind::CommonDeclaration(<>),
    <VariableDeclaration> => BlockStatementKind::VariableDeclaration(<>),
    // assignment
    <start:@L> <target:BoxExpr> <op:AssignOp> <value:BoxExpr> ";" <end:@R> => {
        let assignment = Assignment { op, target, value, span: loc.span(start, end) };
        BlockStatementKind::Assignment(assignment)
    },
    // expression
    // TODO semicolon is optional for control flow statements
    <start:@L> <inner:BoxExpr> ";" <end:@R> => {
        BlockStatementKind::Expression(inner)
    },
    // block
    <Block<BlockStatement>> => BlockStatementKind::Block(<>),
    // control flow
    IfStatement<BlockStatement>
        => BlockStatementKind::If(<>),
    ForStatement<BlockStatement>
        => BlockStatementKind::For(<>),
    <span_keyword:Span<"while">> "(" <cond:BoxExpr> ")" <body:Block<BlockStatement>>
        => BlockStatementKind::While(WhileStatement { span_keyword, cond, body }),
    // control flow terminators
    <span_return:Span<"return">> <value:BoxExpr?> ";"
        => BlockStatementKind::Return(ReturnStatement { span_return, value }),
    <span:Span<"break">> ";" => BlockStatementKind::Break(span),
    <span:Span<"continue">> ";" => BlockStatementKind::Continue(span),
}

IfStatement<S>: IfStatement<S> = {
    <start:@L> <span_if:Span<"if">> "(" <cond:BoxExpr> ")" <then_block:Block<S>> <end_if:@R>
    <else_ifs:ElseIfPair<S>*>
    <final_else:("else" <Block<S>>)?> => {
        IfStatement {
            initial_if: IfCondBlockPair {
                span: loc.span(start, end_if),
                span_if: span_if,
                cond: cond,
                block: then_block
            },
            else_ifs,
            final_else
        }
    },
}

ElseIfPair<S>: IfCondBlockPair<S> = {
    <start:@L> "else" <span_if:Span<"if">> "(" <cond:BoxExpr> ")" <block:Block<S>> <end:@R>
        => IfCondBlockPair { cond, block, span: loc.span(start, end), span_if },
}

ForStatement<S>: ForStatement<S> = {
    "for" "(" <index:MaybeId> <index_ty: (":" <Box<ExprLevelNoIn>>)?> "in" <iter:Box<ExprLevelNoIn>> ")" <body:Block<S>>
        => ForStatement { index, index_ty, iter, body },
}

CommonDeclaration: CommonDeclaration = {
    <start:@L> "type" <id:MaybeId> <params:Parameters<Parameter>?> "=" <body:BoxExpr> ";" <end:@R>
        => CommonDeclaration::Type(TypeDeclaration { id, params, body, span: loc.span(start, end) }),

    <start:@L> "const" <id:MaybeId> <ty:(":" <BoxExpr>)?> "=" <value:BoxExpr> ";" <end:@R>
        => CommonDeclaration::Const(ConstDeclaration { id, ty, value, span: loc.span(start, end) }),

    <start:@L>
        "struct" <id:MaybeId> <params:Parameters<Parameter>?>
        "{" <fields: Separated<StructField, ",">> "}"
    <end:@R>
        => CommonDeclaration::Struct(StructDeclaration { id, params, fields, span: loc.span(start, end) }),
    <start:@L>
        "enum" <id:MaybeId> <params:Parameters<Parameter>?>
        "{" <variants: Separated<EnumVariant, ",">> "}"
    <end:@R>
        => CommonDeclaration::Enum(EnumDeclaration { id, params, variants, span: loc.span(start, end) }),

    // TODO add struct, enum

    // We only allow tightly-bounding expressions in the return type to avoid (formal) ambiguity.
    // TODO allow specifying "const" before function params to make error messages nicer
    <start:@L>
        "fn" <id:MaybeId> <params:Parameters<Parameter>>
        <ret_ty:("->" <Spanned<ExprLevelArrayNoStruct>>)?>
        <body:Block<BlockStatement>>
    <end:@R>
        => CommonDeclaration::Function(FunctionDeclaration { id, params, ret_ty, body, span: loc.span(start, end) }),
}

VariableDeclaration: VariableDeclaration = {
    <start:@L> <mutable:VariableMutable> <id:MaybeId> <ty: (":"<BoxExpr>)?> <init: ("="<BoxExpr>)?> ";" <end:@R> => {
        VariableDeclaration { mutable, id, ty, init, span: loc.span(start, end) }
    },
}

VariableMutable: bool = {
    "val" => false,
    "var" => true,
}

// parameters
Parameters<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P, ",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

Parameter: Parameter = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R> => Parameter { id, ty, span: loc.span(start, end) },
}

// TODO get rid of the need for a comma after a block
// TODO add shorthand when port and connected expression are the same string
ModulePorts: Vec<ModulePortItem> = Separated<ModulePortItem, ",">;

ModulePortItem: ModulePortItem = {
    <start:@L> <id:Id> ":" <direction:Spanned<PortDirection>> <kind:Spanned<WireKind>> <end:@R>
            => ModulePortItem::Single(ModulePortSingle { id, direction, kind, span: loc.span(start, end) }),
    <start:@L> <domain:Spanned<DomainKind>> "{" <ports:Separated<ModulePortInBlock, ",">> "}" <end:@R>
        => ModulePortItem::Block(ModulePortBlock { domain, ports, span: loc.span(start, end) }),
}

ModulePortInBlock: ModulePortInBlock = {
    <start:@L> <id:Id> ":" <direction:Spanned<PortDirection>> <ty:BoxExpr> <end:@R>
        => ModulePortInBlock { id, direction, ty, span: loc.span(start, end) },
}

WireKind: WireKind<Spanned<DomainKind<Box<Expression>>>, Box<Expression>> = {
    "clock" => WireKind::Clock,
    <domain:Spanned<DomainKind>> <ty:BoxExpr> => WireKind::Normal { domain, ty },
}

PortDirection: PortDirection = {
    "in" => PortDirection::Input,
    "out" => PortDirection::Output,
}

DomainKind: DomainKind<Box<Expression>> = {
    "async" => DomainKind::Async,
    <SyncDomain> => DomainKind::Sync(<>),
}

SyncDomain: SyncDomain<Box<Expression>> = {
    "sync" "(" <clock:BoxExpr> "," <reset:BoxExpr> ")" => SyncDomain { clock, reset },
}

// expressions
Expr: Expression = Spanned<ExprLevelIn>;
BoxExpr: Box<Expression> = Box<Expr>;

ExprLevelIn: ExpressionKind = {
    <value:Spanned<ExprLevelRange>> <op:Span<"in">> <range:Spanned<ExprLevelRange>>
        => build_binary_op(op, BinaryOp::In, value, range),
    ExprLevelRange,
}

ExprLevelNoIn: Expression = Spanned<ExprLevelRange>;

ExprLevelRange: ExpressionKind = {
    // assoc none
    <start:BoxSpanned<ExprLevelLogical>?> <op_span:Span<"..">> <end:BoxSpanned<ExprLevelLogical>?>
        => ExpressionKind::RangeLiteral(RangeLiteral::ExclusiveEnd { op_span, start, end }),
    <start:BoxSpanned<ExprLevelLogical>?> <op_span:Span<"..=">> <end:BoxSpanned<ExprLevelLogical>>
        => ExpressionKind::RangeLiteral(RangeLiteral::InclusiveEnd { op_span, start, end }),
    <start:BoxSpanned<ExprLevelLogical>> <op_span:Span<"..+">> <len:BoxSpanned<ExprLevelLogical>>
        => ExpressionKind::RangeLiteral(RangeLiteral::Length { op_span, start, len }),
    ExprLevelLogical,
}

ExprLevelLogical: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelLogicalAnd>> <op:Span<"&&">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolAnd, left, right),
    <left:Spanned<ExprLevelLogicalOr>> <op:Span<"||">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolOr, left, right),
    <left:Spanned<ExprLevelLogicalXor>> <op:Span<"^^">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolXor, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalAnd>> <op:Span<"&&">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalOr>> <op:Span<"||">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalXor: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalXor>> <op:Span<"^^">> <right:Spanned<ExprLevelEqual>> =>
        build_binary_op(op, BinaryOp::BoolXor, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelBitWise>> <op:Span<"==">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpEq, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"!=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpNeq, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<">=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpGte, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<">">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpGt, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"<=">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpLte, left, right),
    <left:Spanned<ExprLevelBitWise>> <op:Span<"<">> <right:Spanned<ExprLevelBitWise>> =>
        build_binary_op(op, BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelBitAnd>> <op:Span<"&">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitAnd, left, right),
    <left:Spanned<ExprLevelBitOr>> <op:Span<"|">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitOr, left, right),
    <left:Spanned<ExprLevelBitXor>> <op:Span<"^">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitXor, left, right),
    ExprLevelShift,
}
ExprLevelBitAnd: ExpressionKind = {
    <left:Spanned<ExprLevelBitAnd>> <op:Span<"&">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitAnd, left, right),
    ExprLevelShift,
}
ExprLevelBitOr: ExpressionKind = {
    <left:Spanned<ExprLevelBitOr>> <op:Span<"|">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitOr, left, right),
    ExprLevelShift,
}
ExprLevelBitXor: ExpressionKind = {
    <left:Spanned<ExprLevelBitXor>> <op:Span<"^">> <right:Spanned<ExprLevelShift>> =>
        build_binary_op(op, BinaryOp::BitXor, left, right),
    ExprLevelShift,
}

ExprLevelShift: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelAdd>> <op:Span<"<<">> <right:Spanned<ExprLevelAdd>> =>
        build_binary_op(op, BinaryOp::Shl, left, right),
    <left:Spanned<ExprLevelAdd>> <op:Span<">>">> <right:Spanned<ExprLevelAdd>> =>
        build_binary_op(op, BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelAdd>> <op:Span<"+">> <right:Spanned<ExprLevelMul>> =>
        build_binary_op(op, BinaryOp::Add, left, right),
    <left:Spanned<ExprLevelAdd>> <op:Span<"-">> <right:Spanned<ExprLevelMul>> =>
        build_binary_op(op, BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelMul>> <op:Span<"*">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(op, BinaryOp::Mul, left, right),
    <left:Spanned<ExprLevelMul>> <op:Span<"/">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(op, BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <left:Spanned<ExprLevelMul>> <op:Span<"%">> <right:Spanned<ExprLevelUnary>> =>
        build_binary_op(op, BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: ExpressionKind = {
    <op:Span<"!">> <inner:BoxSpanned<ExprLevelPower>> =>
        ExpressionKind::UnaryOp(Spanned { span: op, inner: UnaryOp::Not }, inner),
    <op:Span<"-">> <inner:BoxSpanned<ExprLevelPower>> =>
        ExpressionKind::UnaryOp(Spanned { span: op, inner: UnaryOp::Neg }, inner),
    ExprLevelPower,
}

ExprLevelPower: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelArray>> <op:Span<"**">> <right:Spanned<ExprLevelArray>> =>
        build_binary_op(op, BinaryOp::Pow, left, right),
    ExprLevelArray,
}

// TODO real implementation again, only matters once we have struct literals and if we decide to use {} for them
ExprLevelArrayNoStruct = ExprLevelArray;

ExprLevelArray: ExpressionKind = {
    // array type
    "[" <args:Spanned<Separated<ArrayLiteralElement, ",">>> "]" <target:BoxSpanned<ExprLevelCallReal>>
        => ExpressionKind::ArrayType(args, target),
    // array index
    <target:BoxSpanned<ExprLevelCallReal >> "[" <args:Spanned<Separated<Expr, ",">>> "]"
        => ExpressionKind::ArrayIndex(target, args),

    // array literal
    "[" <Separated<ArrayLiteralElement, ",">> "]"
        => ExpressionKind::ArrayLiteral(<>),
    // tuple literal
    "(" <SeparatedAtLeastOneSep<Expr, ",">> ")"
        => ExpressionKind::TupleLiteral(<>),

    // array comprehension
    "[" <body:Box<ArrayLiteralElement>> "for" <index:MaybeId> "in" <iter:Box<ExprLevelNoIn>> "]"
        => ExpressionKind::ArrayComprehension(ArrayComprehension { body, index, iter }),

    ExprLevelCallReal,
}

ExprLevelCallReal: ExpressionKind = {
    // call
    "__builtin" "(" <args:Spanned<Separated<Expr, ",">>> ")" => ExpressionKind::Builtin(args),
    <target:BoxSpanned<ExprLevelAtomic>> "(" <args:Args> ")" => ExpressionKind::Call(target, args),
    ExprLevelDotIndex,
}

Args: Args = {
    <start:@L> <inner:Separated<Arg, ",">> <end:@L> =>
        Args { inner, span: loc.span(start, end) },
}

Arg: Arg = {
    <start:@L> <name:(<Id> "=")?> <value:Expr> <end:@L> =>
        Arg { name, value, span: loc.span(start, end) },
}

ExprLevelDotIndex: ExpressionKind = {
    // assoc left
    <target: BoxSpanned<ExprLevelDotIndex>> "." <index: Id>
        => ExpressionKind::DotIdIndex(target, index),
    <target: BoxSpanned<ExprLevelDotIndex>> "." <index: Spanned<TokenIntLiteralDecimal>>
        => ExpressionKind::DotIntIndex(target, index.map_inner(|s| s.to_string())),
    ExprLevelAtomic,
}

ArrayLiteralElement: ArrayLiteralElement<Expression> = {
    // TODO allow multiple stars to flatten multi-dimensional arrays?
    <spread:Span<"*">> <value:Expr> => ArrayLiteralElement::Spread(spread, value),
    <value:Expr> => ArrayLiteralElement::Single(value),
}

ExprLevelStructInit: ExpressionKind = {
    //  struct
    // TODO allow struct type params?
    // <struct_ty:Id> "{" "}" => {},
//    <struct_ty:ExprLevelCall> "{" <fields:Separated<StructLiteralField, ",">> "}" => {},
//        ExpressionKind::StructLiteral(StructLiteral { struct_ty, fields }),
    ExprLevelAtomic,
}

StructLiteralField: StructLiteralField = {
    <start:@L> <id:Id> ":" <value:Expr> <end:@R> => StructLiteralField { id, value, span: loc.span(start, end) },
}

ExprLevelAtomic: ExpressionKind = {
    // parentheses
    "(" <expr:BoxExpr> ")" => ExpressionKind::Wrapped(expr),
    // TODO allow paths as expressions
    // id
    <id:Id> => ExpressionKind::Id(id),
    // type
    "type" => ExpressionKind::Type,
    "fn" => ExpressionKind::TypeFunction,
    "_" => ExpressionKind::Dummy,
    // literals
    "true" => ExpressionKind::BoolLiteral(true),
    "false" => ExpressionKind::BoolLiteral(false),
    "undef" => ExpressionKind::Undefined,
    <string:TokenIntLiteralBinary>
        => ExpressionKind::IntLiteral(IntLiteral::Binary(string.to_owned())),
    <string:TokenIntLiteralDecimal>
        => ExpressionKind::IntLiteral(IntLiteral::Decimal(string.to_owned())),
    <string:TokenIntLiteralHexadecimal>
        => ExpressionKind::IntLiteral(IntLiteral::Hexadecimal(string.to_owned())),
    // TODO escape sequences and string formatting expressions
    // TODO assert that the first and last char are indeed '"'
    <full:TokenStringLiteral> => {
        let string = full[1..full.len()-1].to_owned();
        ExpressionKind::StringLiteral(string.to_owned())
    },
}

//Path: Path = {
//    <start:@L> <steps: Spanned<(<Id> ".")*>> <id: Id> <end:@R>
//        => Path { span: loc.span(start, end), steps, id }
//}

// terminals
Id: Identifier = {
    <start:@L> <string:TokenIdentifier> <end:@R>
        => Identifier { string: string.to_owned(), span: loc.span(start, end) },
}

MaybeId: MaybeIdentifier = {
    <start:@L> "_" <end:@R> => MaybeIdentifier::Dummy(loc.span(start, end)),
    <id:Id> => MaybeIdentifier::Identifier(id),
}

Vis: Visibility<Span> = {
    <start:@L> "pub" <end:@R> => Visibility::Public(loc.span(start, end)),
    => Visibility::Private,
}

AssignOp: Spanned<Option<BinaryOp>> = Spanned<AssignOpInner>;

AssignOpInner: Option<BinaryOp> = {
    "=" => None,
    "+=" => Some(BinaryOp::Add),
    "-=" => Some(BinaryOp::Sub),
    "*=" => Some(BinaryOp::Mul),
    "/=" => Some(BinaryOp::Div),
    "%=" => Some(BinaryOp::Mod),
    "&=" => Some(BinaryOp::BitAnd),
    "^=" => Some(BinaryOp::BitXor),
    "|=" => Some(BinaryOp::BitOr),
}

// utilities
GroupedList<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P, ",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

Separated<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

SeparatedAtLeastOneSep<T, S>: Vec<T> = {
    <mut v:(<T> S)+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[inline]
Box<T>: Box<T> = {
    T => Box::new(<>),
}

#[inline]
BoxSpanned<T>: Box<Spanned<T>> = Box<Spanned<T>>;

#[inline]
Spanned<T>: Spanned<T> = {
    <start:@L> <inner:T> <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

#[inline]
Span<T>: Span = {
    <start:@L> <inner:T> <end:@R> => loc.span(start, end),
}
