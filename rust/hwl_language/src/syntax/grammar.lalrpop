use crate::syntax::ast::*;
use crate::syntax::LocationBuilder;
use crate::syntax::token::{TokenType, TokenError};

// TODO move this boilerplate stuff to the bottom
grammar<'s>(loc: &LocationBuilder, input: &'s str);

// TODO skip whitespace and comment tokens again
extern {
    type Location = usize;
    type Error = TokenError;

    enum TokenType<&'s str> {
        TokenWhiteSpace => TokenType::WhiteSpace(<&'s str>),
        TokenLineComment => TokenType::LineComment(<&'s str>),
        TokenBlockComment => TokenType::BlockComment(<&'s str>),
        TokenIdentifier => TokenType::Identifier(<&'s str>),
        TokenIntLiteralDecimal => TokenType::IntLiteralDecimal(<&'s str>),
        TokenIntPatternHexadecimal => TokenType::IntPatternHexadecimal(<&'s str>),
        TokenIntPatternBinary => TokenType::IntPatternBinary(<&'s str>),
        TokenStringLiteral => TokenType::StringLiteral(<&'s str>),
        "import" => TokenType::Import,
        "as" => TokenType::As,
        "type" => TokenType::Type,
        "any" => TokenType::Any,
        "struct" => TokenType::Struct,
        "enum" => TokenType::Enum,
        "generics" => TokenType::Generics,
        "ports" => TokenType::Ports,
        "body" => TokenType::Body,
        "module" => TokenType::Module,
        "instance" => TokenType::Instance,
        "function" => TokenType::Function,
        "combinatorial" => TokenType::Combinatorial,
        "clock" => TokenType::Clock,
        "clocked" => TokenType::Clocked,
        "const" => TokenType::Const,
        "val" => TokenType::Val,
        "var" => TokenType::Var,
        "wire" => TokenType::Wire,
        "reg" => TokenType::Reg,
        "in" => TokenType::In,
        "out" => TokenType::Out,
        "async" => TokenType::Async,
        "sync" => TokenType::Sync,
        "return" => TokenType::Return,
        "break" => TokenType::Break,
        "continue" => TokenType::Continue,
        "true" => TokenType::True,
        "false" => TokenType::False,
        "if" => TokenType::If,
        "else" => TokenType::Else,
        "loop" => TokenType::Loop,
        "for" => TokenType::For,
        "while" => TokenType::While,
        "pub" => TokenType::Public,
        "__builtin" => TokenType::Builtin,
        ";" => TokenType::Semi,
        ":" => TokenType::Colon,
        "," => TokenType::Comma,
        "->" => TokenType::Arrow,
        "_" => TokenType::Underscore,
        "::" => TokenType::ColonColon,
        "{" => TokenType::OpenC,
        "}" => TokenType::CloseC,
        "(" => TokenType::OpenR,
        ")" => TokenType::CloseR,
        "[" => TokenType::OpenS,
        "]" => TokenType::CloseS,
        "." => TokenType::Dot,
        ".." => TokenType::Dots,
        "..=" => TokenType::DotsEq,
        "&&" => TokenType::AmperAmper,
        "||" => TokenType::PipePipe,
        "==" => TokenType::EqEq,
        "!=" => TokenType::Neq,
        ">=" => TokenType::Gte,
        ">" => TokenType::Gt,
        "<=" => TokenType::Lte,
        "<" => TokenType::Lt,
        "&" => TokenType::Amper,
        "^" => TokenType::Circumflex,
        "|" => TokenType::Pipe,
        "<<" => TokenType::LtLt,
        ">>" => TokenType::GtGt,
        "+" => TokenType::Plus,
        "-" => TokenType::Minus,
        "*" => TokenType::Star,
        "/" => TokenType::Slash,
        "%" => TokenType::Percent,
        "!" => TokenType::Bang,
        "**" => TokenType::StarStar,
        "=" => TokenType::Eq,
        "+=" => TokenType::PlusEq,
        "-=" => TokenType::MinusEq,
        "*=" => TokenType::StarEq,
        "/=" => TokenType::SlashEq,
        "%=" => TokenType::PercentEq,
        "&=" => TokenType::AmperEq,
        "^=" => TokenType::CircumflexEq,
        "|=" => TokenType::BarEq,
    }
}

pub FileContent: FileContent = {
    <start:@L> <items: Item*> <end:@R> => FileContent { items, span: loc.span(start, end) }
}

// items
Item: Item = {
    <start:@L> "import" <parents:Spanned<(<Id> ".")+>> <entry:Spanned<ImportFinalKind>> ";" <end:@R>
        => Item::Import(ItemImport { parents, entry, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "type" <id:Id> <params:Parameters<GenericParameter>?> "=" <inner:BoxExpr> ";" <end:@R>
        => Item::Type(ItemDefType { vis, id, inner, params, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "struct" <id:Id> <params:Parameters<GenericParameter>?> "{" <fields: Separated<StructField, ",">> "}" <end:@R>
        => Item::Struct(ItemDefStruct { vis, id, params, fields, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "enum" <id:Id> <params:Parameters<GenericParameter>?> "{" <variants: Separated<EnumVariant, ",">> "}" <end:@R>
        => Item::Enum(ItemDefEnum { vis, id, params, variants, span: loc.span(start, end) }),
    <start:@L> <vis:Vis> "module" <id:Id> <params:("generics" <Parameters<GenericParameter>>)?> "ports" <ports:Parameters<ModulePort>> "body" <body:Block<ModuleStatement>> <end:@R>
        => Item::Module(ItemDefModule { vis, id, params, ports, body, span: loc.span(start, end) }),
    // We only allow tightly-bounding expressions in the return type to avoid (formal) ambiguity.
    <start:@L> <vis:Vis> "function" <id:Id> <params:Parameters<GenericParameter>> <ret_ty:(":" <Spanned<ExprLevelCallNoStruct>>)?> <body:Block<BlockStatement>> <end:@R>
        => Item::Function(ItemDefFunction { vis, id, params, ret_ty, body, span: loc.span(start, end) }),
}

ImportFinalKind: ImportFinalKind = {
    ImportEntry => ImportFinalKind::Single(<>),
    "[" <Separated<ImportEntry, ",">> "]" => ImportFinalKind::Multi(<>),
}

ImportEntry: ImportEntry = {
    <start:@L> <id:Id> <as_:("as" <MaybeId>)?> <end:@R>
        => ImportEntry { id, as_, span: loc.span(start, end) },
}

EnumVariant: EnumVariant = {
    <start:@L> <id:Id> <content:("(" <Expr> ")")?> <end:@R>
        => EnumVariant { id, content, span: loc.span(start, end) },
}

StructField: StructField = {
    <start:@L> <id:Id> ":" <ty:Expr> <end:@R>
        => StructField { id, ty, span: loc.span(start, end) },
}

Block<S>: Block<S> = {
    <start:@L> "{" <statements:S*> "}" <end:@R> => {
        Block { statements, span: loc.span(start, end) }
    },
}

ModuleStatement: ModuleStatement = Spanned<ModuleStatementKind>;
BlockStatement: BlockStatement = Spanned<BlockStatementKind>;

ModuleStatementKind: ModuleStatementKind = {
    // declaration
    <VariableDeclaration> =>
        ModuleStatementKind::VariableDeclaration(<>),
    <start:@L> "reg" <id:MaybeId> ":" <sync:Spanned<SyncDomain>> <ty:BoxExpr> "=" <init:BoxExpr> ";" <end:@R> => {
        let decl = RegDeclaration { span: loc.span(start, end), id, sync, ty, init };
        ModuleStatementKind::RegDeclaration(decl)
    },
    <start:@L> "wire" <id:MaybeId> ":" <sync:Spanned<DomainKind>> <ty:BoxExpr> <value: ("=" <BoxExpr>)?> ";" <end:@R> => {
        let decl = WireDeclaration { span: loc.span(start, end), id, sync, ty, value };
        ModuleStatementKind::WireDeclaration(decl)
    },
    // combinatorial block
    <start:@L> "combinatorial" <end_keyword:@R> <block:Block<BlockStatement>> <end:@R> => {
        let inner = CombinatorialBlock {
            block,
            span: loc.span(start, end),
            span_keyword: loc.span(start, end_keyword),
        };
        ModuleStatementKind::CombinatorialBlock(inner)
    },
    // clocked block
    <start:@L> "clocked" <end_keyword:@R> "(" <clock:BoxExpr> "," <reset:BoxExpr> ")" <block:Block<BlockStatement>> <end:@R> => {
        let inner = ClockedBlock {
            clock, reset, block,
            span: loc.span(start, end),
            span_keyword: loc.span(start, end_keyword),
        };
        ModuleStatementKind::ClockedBlock(inner)
    },
    // module instance
    // TODO this is ugly syntax: why are generics and ports different
    <start:@L>
        "instance" <instance_end:@R> <name:(<Id> "=")?> <module:BoxExpr>
        <generic_args:("generics" "(" <Spanned<Separated<GenericNamedArg, ",">>> ")")?>
        "ports" "(" <port_connections:Spanned<Separated<PortNamedArg, ",">>> ")"
        ";"
    <end:@R> => {
        let instance = ModuleInstance {
            name, module, generic_args, port_connections,
            span_keyword: loc.span(start, instance_end),
            span: loc.span(start, end),
        };
        ModuleStatementKind::Instance(instance)
    },
}

GenericNamedArg: (Identifier, Expression) = {
    <id:Id> "=" <value:Expr> => (id, value),
}

PortNamedArg: (Identifier, Expression) = {
    "." <id:Id> "(" <value:Expr> ")" => (id, value),
}

BlockStatementKind: BlockStatementKind = {
    // declaration
    <VariableDeclaration> =>
        BlockStatementKind::VariableDeclaration(<>),
    // assignment
    <start:@L> <target:BoxExpr> <op:AssignOp> <value:BoxExpr> ";" <end:@R> => {
        let assignment = Assignment { op, target, value, span: loc.span(start, end) };
        BlockStatementKind::Assignment(assignment)
    },
    // expression
    // TODO semicolon is optional for control flow statements
    <start:@L> <inner:BoxExpr> ";" <end:@R> => {
        BlockStatementKind::Expression(inner)
    },
}

VariableDeclaration: VariableDeclaration = {
    <start:@L> <mutable:VariableMutable> <id:MaybeId> <ty: (":" <BoxExpr>)?> <init: ("=" <BoxExpr>)?> ";" <end:@R> => {
        VariableDeclaration { mutable, id, ty, init, span: loc.span(start, end) }
    },
}

VariableMutable: bool = {
    "val" => false,
    "var" => true,
}

// parameters
Parameters<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P, ",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

GenericParameter: GenericParameter = {
    <start:@L> <id:Id> ":" <kind:GenericParameterKind> <end:@R> => GenericParameter { id, kind, span: loc.span(start, end) },
}

GenericParameterKind: GenericParameterKind = {
    <start:@L> "type" <end:@R> => GenericParameterKind::Type(loc.span(start, end)),
    <ty:Expr> => GenericParameterKind::Value(ty),
}

ModulePort: ModulePort = {
    <start:@L> <id:Id> ":" <direction:Spanned<PortDirection>> <kind:Spanned<PortKind>> <end:@R>
        => ModulePort { id, direction, kind, span: loc.span(start, end) },
}

PortKind: PortKind<Spanned<DomainKind<Box<Expression>>>, Box<Expression>> = {
    "clock" => PortKind::Clock,
    <domain:Spanned<DomainKind>> <ty:BoxExpr> => PortKind::Normal { domain, ty },
}

PortDirection: PortDirection = {
    "in" => PortDirection::Input,
    "out" => PortDirection::Output,
}

DomainKind: DomainKind<Box<Expression>> = {
    "async" => DomainKind::Async,
    <SyncDomain> => DomainKind::Sync(<>),
}

SyncDomain: SyncDomain<Box<Expression>> = {
    "sync" "(" <clock:BoxExpr> "," <reset:BoxExpr> ")" => SyncDomain { clock, reset },
}

// expressions
Expr: Expression = Spanned<ExprLevelReturn>;
BoxExpr: Box<Expression> = Box<Expr>;

ExprLevelReturn: ExpressionKind = {
    "return" <value:BoxExpr?> => ExpressionKind::Return(value),
    "break" <value:BoxExpr?> => ExpressionKind::Break(value),
    "continue" => ExpressionKind::Continue,
    ExprLevelRange,
}

ExprLevelRange: ExpressionKind = {
    // assoc none
    <range_start: BoxSpanned<ExprLevelLogical>?> ".." <range_end: BoxSpanned<ExprLevelLogical>?>
        => ExpressionKind::RangeLiteral(RangeLiteral { end_inclusive: false, start: range_start, end: range_end }),
    <range_start: BoxSpanned<ExprLevelLogical>?> "..=" <range_end: BoxSpanned<ExprLevelLogical>?>
        => ExpressionKind::RangeLiteral(RangeLiteral { end_inclusive: true, start: range_start, end: range_end }),
    ExprLevelLogical,
}

ExprLevelLogical: ExpressionKind = {
    // assoc left, no mixing
    <left:Spanned<ExprLevelLogicalAnd>> "&&" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolAnd, left, right),
    <left:Spanned<ExprLevelLogicalOr>> "||" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalAnd: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalAnd>> "&&" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolAnd, left, right),
    ExprLevelEqual,
}
ExprLevelLogicalOr: ExpressionKind = {
    <left:Spanned<ExprLevelLogicalOr>> "||" <right:Spanned<ExprLevelEqual>> => build_binary_op(BinaryOp::BoolOr, left, right),
    ExprLevelEqual,
}

ExprLevelEqual: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelBitWise>> "==" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpEq, left, right),
    <left:Spanned<ExprLevelBitWise>> "!=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpNeq, left, right),
    <left:Spanned<ExprLevelBitWise>> ">=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpGte, left, right),
    <left:Spanned<ExprLevelBitWise>> ">" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpGt, left, right),
    <left:Spanned<ExprLevelBitWise>> "<=" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpLte, left, right),
    <left:Spanned<ExprLevelBitWise>> "<" <right:Spanned<ExprLevelBitWise>> => build_binary_op(BinaryOp::CmpLt, left, right),
    ExprLevelBitWise,
}

ExprLevelBitWise: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelBitWise>> "&" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitAnd, left, right),
    <left:Spanned<ExprLevelBitWise>> "^" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitXor, left, right),
    <left:Spanned<ExprLevelBitWise>> "|" <right:Spanned<ExprLevelShift>> => build_binary_op(BinaryOp::BitOr, left, right),
    ExprLevelShift,
}

ExprLevelShift: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelAdd>> "<<" <right:Spanned<ExprLevelAdd>> => build_binary_op(BinaryOp::Shl, left, right),
    <left:Spanned<ExprLevelAdd>> ">>" <right:Spanned<ExprLevelAdd>> => build_binary_op(BinaryOp::Shr, left, right),
    ExprLevelAdd,
}

ExprLevelAdd: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelAdd>> "+" <right:Spanned<ExprLevelMul>> => build_binary_op(BinaryOp::Add, left, right),
    <left:Spanned<ExprLevelAdd>> "-" <right:Spanned<ExprLevelMul>> => build_binary_op(BinaryOp::Sub, left, right),
    ExprLevelMul,
}

ExprLevelMul: ExpressionKind = {
    // assoc left
    <left:Spanned<ExprLevelMul>> "*" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Mul, left, right),
    <left:Spanned<ExprLevelMul>> "/" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Div, left, right),
    // TODO disallow mixing this with mul and/or div?
    <left:Spanned<ExprLevelMul>> "%" <right:Spanned<ExprLevelUnary>> => build_binary_op(BinaryOp::Mod, left, right),
    ExprLevelUnary,
}

ExprLevelUnary: ExpressionKind = {
    "!" <inner:BoxSpanned<ExprLevelPower>> => ExpressionKind::UnaryOp(UnaryOp::Not, inner),
    "-" <inner:BoxSpanned<ExprLevelPower>> => ExpressionKind::UnaryOp(UnaryOp::Neg, inner),
    ExprLevelPower,
}

ExprLevelPower: ExpressionKind = {
    // assoc none
    <left:Spanned<ExprLevelCall>> "**" <right:Spanned<ExprLevelCall>> => build_binary_op(BinaryOp::Pow, left, right),
    ExprLevelCall,
}

ExprLevelCall = ExprLevelCallGeneric<ExprLevelStructInit>;
ExprLevelCallNoStruct = ExprLevelCallGeneric<ExprLevelAtomic>;

ExprLevelCallGeneric<AtomicInner>: ExpressionKind = {
    "__builtin" "(" <args:CallArgs> ")" =>
        ExpressionKind::Builtin(args),
    <target:BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "(" <args:CallArgs> ")" =>
        ExpressionKind::Call(target, args),
    <target:BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "[" <args:CallArgs> "]" =>
        ExpressionKind::ArrayIndex(target, args),
    ExprLevelDotIndex<AtomicInner>,
}

CallArgs: Args = {
    // TODO support named args
    <start:@L> <inner:Separated<Expr, ",">> <end:@L> =>
        Args { inner, span: loc.span(start, end) },
}

ExprLevelDotIndex<AtomicInner>: ExpressionKind = {
    // assoc left
    <target: BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "." <index: Id>
        => ExpressionKind::DotIdIndex(target, index),
    <target: BoxSpanned<ExprLevelDotIndex<AtomicInner>>> "." <index: Spanned<TokenIntLiteralDecimal>>
        => ExpressionKind::DotIntIndex(target, index.map_inner(|s| s.to_string())),
    ExprLevelStructureInit<AtomicInner>,
}

ExprLevelStructureInit<AtomicInner>: ExpressionKind = {
    // initializers
    //  tuples
    "(" <values:SeparatedAtLeastOneSep<Expr, ",">> ")" => ExpressionKind::TupleLiteral(values),
    //  array
    "[" <elements:Separated<Expr, ",">> "]" => ExpressionKind::ArrayLiteral(elements),
    AtomicInner,
}

ExprLevelStructInit: ExpressionKind = {
    //  struct
    // TODO allow struct type params?
    // <struct_ty:Id> "{" "}" => todo!(),
    <struct_ty:ExprLevelCall> "{" <fields:Separated<StructLiteralField, ",">> "}" => todo!(),
//        ExpressionKind::StructLiteral(StructLiteral { struct_ty, fields }),
    ExprLevelAtomic,
}

StructLiteralField: StructLiteralField = {
    <start:@L> <id:Id> ":" <value:Expr> <end:@R> => StructLiteralField { id, value, span: loc.span(start, end) },
}

ExprLevelAtomic: ExpressionKind = {
    // parentheses
    "(" <expr:BoxExpr> ")" => ExpressionKind::Wrapped(expr),
    // block
    <block:Block<BlockStatement>> => ExpressionKind::Block(block),
    // TODO allow paths as expressions
    // id
    <id:Id> => ExpressionKind::Id(id),
    "_" => ExpressionKind::Dummy,
    // literals
    "true" => ExpressionKind::BoolLiteral(true),
    "false" => ExpressionKind::BoolLiteral(false),
    <string:TokenIntPatternHexadecimal>
        => ExpressionKind::IntPattern(IntPattern::Hex(string[2..].to_owned())),
    <string:TokenIntPatternBinary>
        => ExpressionKind::IntPattern(IntPattern::Bin(string[2..].to_owned())),
    <string:TokenIntLiteralDecimal>
        => ExpressionKind::IntPattern(IntPattern::Dec(string.to_owned())),
    // TODO escape sequences and string formatting expressions
    <full:TokenStringLiteral> => {
        let string = full[1..full.len()-1].to_owned();
        ExpressionKind::StringLiteral(string.to_owned())
    },
    // any
    "any" => ExpressionKind::Any,

    // control flow
    ExprControlFlow,
}

ExprControlFlow: ExpressionKind = {
    // if
    "if" "(" <cond:BoxExpr> ")" <then_block:Block<BlockStatement>> <else_if_pairs:ElseIfPair*> <else_block:("else" <Block<BlockStatement>>)?>
        => ExpressionKind::If(IfExpression { cond, then_block, else_if_pairs, else_block }),
    // loop
    "loop" <body:Block<BlockStatement>>
        => ExpressionKind::Loop(LoopExpression { body }),
    // for
    "for" "(" <index:MaybeId> <index_ty: (":" <BoxExpr>)?> "in" <iter:BoxExpr> ")" <body:Block<BlockStatement>>
        => ExpressionKind::For(ForExpression { index, index_ty, iter, body }),
    // while
    "while" "(" <cond:BoxExpr> ")" <body:Block<BlockStatement>>
        => ExpressionKind::While(WhileExpression { cond, body }),
}

//Path: Path = {
//    <start:@L> <steps: Spanned<(<Id> ".")*>> <id: Id> <end:@R>
//        => Path { span: loc.span(start, end), steps, id }
//}

ElseIfPair: ElseIfPair = {
    <start:@L> "else" "if" "(" <cond:BoxExpr> ")" <block:Block<BlockStatement>> <end:@R>
        => ElseIfPair { cond, block, span: loc.span(start, end) },
}

// terminals
Id: Identifier = {
    <start:@L> <string:TokenIdentifier> <end:@R>
        => Identifier { string: string.to_owned(), span: loc.span(start, end) },
}

MaybeId: MaybeIdentifier = {
    <start:@L> "_" <end:@R> => MaybeIdentifier::Dummy(loc.span(start, end)),
    <id:Id> => MaybeIdentifier::Identifier(id),
}

Vis: Visibility = {
    // TODO pub or public?
    <start:@L> "pub" <end:@R> => Visibility::Public(loc.span(start, end)),
    => Visibility::Private,
}

AssignOp: Spanned<Option<BinaryOp>> = Spanned<AssignOpInner>;

AssignOpInner: Option<BinaryOp> = {
    "=" => None,
    "+=" => Some(BinaryOp::Add),
    "-=" => Some(BinaryOp::Sub),
    "*=" => Some(BinaryOp::Mul),
    "/=" => Some(BinaryOp::Div),
    "%=" => Some(BinaryOp::Mod),
    "&=" => Some(BinaryOp::BitAnd),
    "^=" => Some(BinaryOp::BitXor),
    "|=" => Some(BinaryOp::BitOr),
}

// utilities
GroupedList<P>: Spanned<Vec<P>> = {
    <start:@L> "(" <inner: Separated<P, ",">> ")" <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

Separated<T, S>: Vec<T> = {
    <mut v:(<T> S)*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

SeparatedAtLeastOneSep<T, S>: Vec<T> = {
    <mut v:(<T> S)+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

#[inline]
Box<T>: Box<T> = {
    T => Box::new(<>),
}

#[inline]
Spanned<T>: Spanned<T> = {
    <start:@L> <inner:T> <end:@R> => Spanned { inner, span: loc.span(start, end) },
}

#[inline]
BoxSpanned<T>: Box<Spanned<T>> = Box<Spanned<T>>;
